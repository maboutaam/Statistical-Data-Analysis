{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border-radius: 15px; border: 3px solid indigo; padding: 15px;\">\n",
    "<b> Reviewer's comment</b>\n",
    "    \n",
    "Hello, my name is Sveta, and I am going to review this project. \n",
    "\n",
    "Before we start, I want to pay your attention to the color marking:\n",
    "    \n",
    "<div class=\"alert alert-success\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment</b>\n",
    "    \n",
    "Great solutions and ideas that can and should be used in the future are in green comments.   \n",
    "</div>    \n",
    "    \n",
    "    \n",
    "<div class=\"alert alert-warning\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment</b>\n",
    "\n",
    "Yellow color indicates what should be optimized. This is not necessary, but it will be great if you make changes to this project.\n",
    "</div>      \n",
    "    \n",
    "    \n",
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment</b>\n",
    "\n",
    "Issues that need to be corrected to get right results are indicated in red comments. Note that the project cannot be accepted until these issues are resolved.\n",
    "</div>    \n",
    "\n",
    "<hr>\n",
    "    \n",
    "**Please, use some color other than those listed to highlight answers to my comments.**\n",
    "I would also ask you **not to change, move or delete my comments** so that it would be easier for me to navigate during the next review.\n",
    "    \n",
    "In addition, my comments are defined as headings. \n",
    "They can mess up the content but they are convenient, since you can immediately go to them. I will remove the headings from my comments in the next review. \n",
    "   \n",
    "    \n",
    "    \n",
    "<hr>\n",
    "    \n",
    "<font color='dodgerblue'>**A few words about the project:**</font> you did a good job, everything is clear and neat, there are  analysis and intermediate conclusions. I still have some questions that I've written in my comments. I've also left there some recommendations for improving the project.\n",
    "    \n",
    "    \n",
    "I will wait for the project for a second review :)\n",
    "    \n",
    "    \n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border-radius: 15px; border: 3px solid indigo; padding: 15px;\">\n",
    "<b> Reviewer's comment 2</b>\n",
    "\n",
    "\n",
    "Thank you for sending the updated version of the project ðŸ˜Š I've left a few comments titled as **Reviewer's comment 2**. Please take a look. \n",
    "\n",
    "</div>\n",
    "<hr>\n",
    "<div style=\"border-radius: 15px; border: 3px solid indigo; padding: 15px;\">\n",
    "<b> Reviewer's comment 3</b>\n",
    "\n",
    "\n",
    "New comments have digit 3. Would you take a look? \n",
    "</div>\n",
    "<hr>\n",
    "<div style=\"border-radius: 15px; border: 3px solid indigo; padding: 15px;\">\n",
    "<b> Reviewer's comment 4</b>\n",
    "\n",
    "\n",
    "New comments have digit 4. You almost finished it! Just a couple of tiny issues. \n",
    "</div>\n",
    "<hr>\n",
    "<div style=\"border-radius: 15px; border: 3px solid indigo; padding: 15px;\">\n",
    "<b> Reviewer's comment 5</b>\n",
    "\n",
    "\n",
    "New comments have digit 5. Please add histograms, not bar charts :) Looks at the histogram you displyed for calls. Can you repeat that? </div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style=\"border-radius: 15px; border: 3px solid indigo; padding: 15px;\">\n",
    "<b> Reviewer's comment 6</b>\n",
    "\n",
    "\n",
    "I've left a couple of new comments titled as **Reviewer's comment 6**. \n",
    "\n",
    "Your project has passed code review. Congratulations ðŸ˜Š\n",
    "    \n",
    "\n",
    "    \n",
    "Take care and good luck! ðŸ˜Š   \n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "<hr>\n",
    "    \n",
    "    \n",
    "Best regards,\n",
    "    \n",
    "Sveta\n",
    "     \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Which one is a better plan?\n",
    "\n",
    "You work as an analyst for the telecom operator Megaline. The company offers its clients two prepaid plans, Surf and Ultimate. The commercial department wants to know which of the plans brings in more revenue in order to adjust the advertising budget.\n",
    "\n",
    "You are going to carry out a preliminary analysis of the plans based on a relatively small client selection. You'll have the data on 500 Megaline clients: who the clients are, where they're from, which plan they use, and the number of calls they made and text messages they sent in 2018. Your job is to analyze the clients' behavior and determine which prepaid plan brings in more revenue."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[We've provided you with some commentary to guide your thinking as you complete this project. However, make sure to remove all the bracketed comments before submitting your project.]\n",
    "\n",
    "[Before you dive into analyzing your data, explain for yourself the purpose of the project and actions you plan to take.]\n",
    "\n",
    "[Please bear in mind that studying, amending, and analyzing data is an iterative process. It is normal to return to previous steps and correct/expand them to allow for further steps.]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment</h2>\n",
    "    \n",
    "There's an introduction, which is good. It is important to write an introductory part because it gives an idea about the content of the project.\n",
    "    \n",
    "</div>\n",
    "<div class=\"alert alert-warning\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2>  Reviewer's comment </h2>\n",
    "    \n",
    "\n",
    "However, try to make it broader next time ðŸ˜Š You can include a short data description.\n",
    "    \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading all the libraries\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "from scipy import stats as st\n",
    "from scipy.stats import ttest_ind\n",
    "import math\n",
    "import datetime\n",
    "\n",
    "%matplotlib inline\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the data files into different DataFrames\n",
    "# Data Loading\n",
    "calls = pd.read_csv(\"/datasets/megaline_calls.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data Loading\n",
    "internet = pd.read_csv(\"/datasets/megaline_internet.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data Loading\n",
    "messages = pd.read_csv(\"/datasets/megaline_messages.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Data Loading\n",
    "plans = pd.read_csv(\"/datasets/megaline_plans.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data Loading\n",
    "users = pd.read_csv(\"/datasets/megaline_users.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Files are: Calls, Internet, Messages, Plans, Users."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prepare the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[The data for this project is split into several tables. Explore each one to get an initial understanding of the data. Do necessary corrections to each table if necessary.]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2 entries, 0 to 1\n",
      "Data columns (total 8 columns):\n",
      " #   Column                 Non-Null Count  Dtype  \n",
      "---  ------                 --------------  -----  \n",
      " 0   messages_included      2 non-null      int64  \n",
      " 1   mb_per_month_included  2 non-null      int64  \n",
      " 2   minutes_included       2 non-null      int64  \n",
      " 3   usd_monthly_pay        2 non-null      int64  \n",
      " 4   usd_per_gb             2 non-null      int64  \n",
      " 5   usd_per_message        2 non-null      float64\n",
      " 6   usd_per_minute         2 non-null      float64\n",
      " 7   plan_name              2 non-null      object \n",
      "dtypes: float64(2), int64(5), object(1)\n",
      "memory usage: 256.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "# Print the general/summary information about the plans' DataFrame\n",
    "plans.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Plans provided are: Surf and Ultimate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "0                 50                  15360               500   \n",
       "1               1000                  30720              3000   \n",
       "\n",
       "   usd_monthly_pay  usd_per_gb  usd_per_message  usd_per_minute plan_name  \n",
       "0               20          10             0.03            0.03      surf  \n",
       "1               70           7             0.01            0.01  ultimate  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Print a sample of data for plans\n",
    "plans.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Describe what you see and notice in the general information and the printed data sample for the above price of data. Are there any issues (inappropriate data types, missing data etc) that may need further investigation and changes? How that can be fixed?]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fix data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Fix obvious issues with the data given the initial observations.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "messages_included        0\n",
       "mb_per_month_included    0\n",
       "minutes_included         0\n",
       "usd_monthly_pay          0\n",
       "usd_per_gb               0\n",
       "usd_per_message          0\n",
       "usd_per_minute           0\n",
       "plan_name                0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "plans_fixed = plans.isnull().sum()\n",
    "plans_fixed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "0                 50                  15360               500   \n",
       "1               1000                  30720              3000   \n",
       "\n",
       "   usd_monthly_pay  usd_per_gb  usd_per_message  usd_per_minute plan_name  \n",
       "0               20          10             0.03            0.03      surf  \n",
       "1               70           7             0.01            0.01  ultimate  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "plans_fixed = plans.dropna()\n",
    "plans_fixed"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Enrich data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Add additional factors to the data if you believe they might be useful.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>avg_cost_per_mb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>0.002279</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "0                 50                  15360               500   \n",
       "1               1000                  30720              3000   \n",
       "\n",
       "   usd_monthly_pay  usd_per_gb  usd_per_message  usd_per_minute plan_name  \\\n",
       "0               20          10             0.03            0.03      surf   \n",
       "1               70           7             0.01            0.01  ultimate   \n",
       "\n",
       "   avg_cost_per_mb  \n",
       "0         0.001302  \n",
       "1         0.002279  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "plans['avg_cost_per_mb'] = plans['usd_monthly_pay'] / plans['mb_per_month_included']\n",
    "plans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>avg_cost_per_mb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>0.002279</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "0                 50                  15360               500   \n",
       "1               1000                  30720              3000   \n",
       "\n",
       "   usd_monthly_pay  usd_per_gb  usd_per_message  usd_per_minute plan_name  \\\n",
       "0               20          10             0.03            0.03      surf   \n",
       "1               70           7             0.01            0.01  ultimate   \n",
       "\n",
       "   avg_cost_per_mb  \n",
       "0         0.001302  \n",
       "1         0.002279  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plans"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Users"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 500 entries, 0 to 499\n",
      "Data columns (total 8 columns):\n",
      " #   Column      Non-Null Count  Dtype \n",
      "---  ------      --------------  ----- \n",
      " 0   user_id     500 non-null    int64 \n",
      " 1   first_name  500 non-null    object\n",
      " 2   last_name   500 non-null    object\n",
      " 3   age         500 non-null    int64 \n",
      " 4   city        500 non-null    object\n",
      " 5   reg_date    500 non-null    object\n",
      " 6   plan        500 non-null    object\n",
      " 7   churn_date  34 non-null     object\n",
      "dtypes: int64(2), object(6)\n",
      "memory usage: 31.4+ KB\n"
     ]
    }
   ],
   "source": [
    "# Print the general/summary information about the users' DataFrame\n",
    "users.info()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 499 users"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>plan</th>\n",
       "      <th>churn_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>Anamaria</td>\n",
       "      <td>Bauer</td>\n",
       "      <td>45</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell, GA MSA</td>\n",
       "      <td>2018-12-24</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>Mickey</td>\n",
       "      <td>Wilkerson</td>\n",
       "      <td>28</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>2018-08-13</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>Carlee</td>\n",
       "      <td>Hoffman</td>\n",
       "      <td>36</td>\n",
       "      <td>Las Vegas-Henderson-Paradise, NV MSA</td>\n",
       "      <td>2018-10-21</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>Reynaldo</td>\n",
       "      <td>Jenkins</td>\n",
       "      <td>52</td>\n",
       "      <td>Tulsa, OK MSA</td>\n",
       "      <td>2018-01-28</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1004</td>\n",
       "      <td>Leonila</td>\n",
       "      <td>Thompson</td>\n",
       "      <td>40</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>2018-05-23</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1005</td>\n",
       "      <td>Livia</td>\n",
       "      <td>Shields</td>\n",
       "      <td>31</td>\n",
       "      <td>Dallas-Fort Worth-Arlington, TX MSA</td>\n",
       "      <td>2018-11-29</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1006</td>\n",
       "      <td>Jesusa</td>\n",
       "      <td>Bradford</td>\n",
       "      <td>73</td>\n",
       "      <td>San Francisco-Oakland-Berkeley, CA MSA</td>\n",
       "      <td>2018-11-27</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>2018-12-18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1007</td>\n",
       "      <td>Eusebio</td>\n",
       "      <td>Welch</td>\n",
       "      <td>42</td>\n",
       "      <td>Grand Rapids-Kentwood, MI MSA</td>\n",
       "      <td>2018-07-11</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1008</td>\n",
       "      <td>Emely</td>\n",
       "      <td>Hoffman</td>\n",
       "      <td>53</td>\n",
       "      <td>Orlando-Kissimmee-Sanford, FL MSA</td>\n",
       "      <td>2018-08-03</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1009</td>\n",
       "      <td>Gerry</td>\n",
       "      <td>Little</td>\n",
       "      <td>19</td>\n",
       "      <td>San Jose-Sunnyvale-Santa Clara, CA MSA</td>\n",
       "      <td>2018-04-22</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id first_name  last_name  age                                    city  \\\n",
       "0     1000   Anamaria      Bauer   45   Atlanta-Sandy Springs-Roswell, GA MSA   \n",
       "1     1001     Mickey  Wilkerson   28         Seattle-Tacoma-Bellevue, WA MSA   \n",
       "2     1002     Carlee    Hoffman   36    Las Vegas-Henderson-Paradise, NV MSA   \n",
       "3     1003   Reynaldo    Jenkins   52                           Tulsa, OK MSA   \n",
       "4     1004    Leonila   Thompson   40         Seattle-Tacoma-Bellevue, WA MSA   \n",
       "5     1005      Livia    Shields   31     Dallas-Fort Worth-Arlington, TX MSA   \n",
       "6     1006     Jesusa   Bradford   73  San Francisco-Oakland-Berkeley, CA MSA   \n",
       "7     1007    Eusebio      Welch   42           Grand Rapids-Kentwood, MI MSA   \n",
       "8     1008      Emely    Hoffman   53       Orlando-Kissimmee-Sanford, FL MSA   \n",
       "9     1009      Gerry     Little   19  San Jose-Sunnyvale-Santa Clara, CA MSA   \n",
       "\n",
       "     reg_date      plan  churn_date  \n",
       "0  2018-12-24  ultimate         NaN  \n",
       "1  2018-08-13      surf         NaN  \n",
       "2  2018-10-21      surf         NaN  \n",
       "3  2018-01-28      surf         NaN  \n",
       "4  2018-05-23      surf         NaN  \n",
       "5  2018-11-29      surf         NaN  \n",
       "6  2018-11-27  ultimate  2018-12-18  \n",
       "7  2018-07-11      surf         NaN  \n",
       "8  2018-08-03  ultimate         NaN  \n",
       "9  2018-04-22      surf         NaN  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Print a sample of data for users\n",
    "users.head(10)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Describe what you see and notice in the general information and the printed data sample for the above price of data. Are there any issues (inappropriate data types, missing data etc) that may need further investigation and changes? How that can be fixed?]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-warning\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2>  Reviewer's comment </h2>\n",
    "    \n",
    "\n",
    "Don't forget about the conclusions.     \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fix Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Fix obvious issues with the data given the initial observations.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id         0\n",
       "first_name      0\n",
       "last_name       0\n",
       "age             0\n",
       "city            0\n",
       "reg_date        0\n",
       "plan            0\n",
       "churn_date    466\n",
       "dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "users_fixed = users.isnull().sum()\n",
    "users_fixed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      False\n",
       "1      False\n",
       "2      False\n",
       "3      False\n",
       "4      False\n",
       "       ...  \n",
       "495    False\n",
       "496    False\n",
       "497    False\n",
       "498    False\n",
       "499    False\n",
       "Length: 500, dtype: bool"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "users_fixed = users.duplicated()\n",
    "users_fixed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>plan</th>\n",
       "      <th>churn_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1006</td>\n",
       "      <td>Jesusa</td>\n",
       "      <td>Bradford</td>\n",
       "      <td>73</td>\n",
       "      <td>San Francisco-Oakland-Berkeley, CA MSA</td>\n",
       "      <td>2018-11-27</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>2018-12-18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1012</td>\n",
       "      <td>Jonelle</td>\n",
       "      <td>Mcbride</td>\n",
       "      <td>59</td>\n",
       "      <td>Chicago-Naperville-Elgin, IL-IN-WI MSA</td>\n",
       "      <td>2018-06-28</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-11-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1022</td>\n",
       "      <td>Bo</td>\n",
       "      <td>Snow</td>\n",
       "      <td>73</td>\n",
       "      <td>New York-Newark-Jersey City, NY-NJ-PA MSA</td>\n",
       "      <td>2018-04-20</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-09-07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>1040</td>\n",
       "      <td>Paris</td>\n",
       "      <td>Santos</td>\n",
       "      <td>72</td>\n",
       "      <td>Philadelphia-Camden-Wilmington, PA-NJ-DE-MD MSA</td>\n",
       "      <td>2018-12-23</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-12-30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>1050</td>\n",
       "      <td>Jone</td>\n",
       "      <td>Owen</td>\n",
       "      <td>23</td>\n",
       "      <td>Miami-Fort Lauderdale-West Palm Beach, FL MSA</td>\n",
       "      <td>2018-03-20</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>2018-10-07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>1054</td>\n",
       "      <td>Denis</td>\n",
       "      <td>Frost</td>\n",
       "      <td>50</td>\n",
       "      <td>Phoenix-Mesa-Chandler, AZ MSA</td>\n",
       "      <td>2018-04-21</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>1067</td>\n",
       "      <td>Robt</td>\n",
       "      <td>Allen</td>\n",
       "      <td>37</td>\n",
       "      <td>Grand Rapids-Kentwood, MI MSA</td>\n",
       "      <td>2018-09-24</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-11-24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>1083</td>\n",
       "      <td>Lyndia</td>\n",
       "      <td>Acevedo</td>\n",
       "      <td>65</td>\n",
       "      <td>Los Angeles-Long Beach-Anaheim, CA MSA</td>\n",
       "      <td>2018-10-26</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-12-18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>1084</td>\n",
       "      <td>Wiley</td>\n",
       "      <td>Mckinney</td>\n",
       "      <td>21</td>\n",
       "      <td>Miami-Fort Lauderdale-West Palm Beach, FL MSA</td>\n",
       "      <td>2018-06-04</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-11-11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94</th>\n",
       "      <td>1094</td>\n",
       "      <td>Walter</td>\n",
       "      <td>Petersen</td>\n",
       "      <td>54</td>\n",
       "      <td>Los Angeles-Long Beach-Anaheim, CA MSA</td>\n",
       "      <td>2018-10-30</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-12-12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>1106</td>\n",
       "      <td>Eddy</td>\n",
       "      <td>Garrison</td>\n",
       "      <td>47</td>\n",
       "      <td>New York-Newark-Jersey City, NY-NJ-PA MSA</td>\n",
       "      <td>2018-05-10</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-11-14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129</th>\n",
       "      <td>1129</td>\n",
       "      <td>Marin</td>\n",
       "      <td>Bolton</td>\n",
       "      <td>70</td>\n",
       "      <td>Baton Rouge, LA MSA</td>\n",
       "      <td>2018-11-10</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-12-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>1172</td>\n",
       "      <td>Weldon</td>\n",
       "      <td>Robinson</td>\n",
       "      <td>72</td>\n",
       "      <td>Boston-Cambridge-Newton, MA-NH MSA</td>\n",
       "      <td>2018-03-30</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-11-29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180</th>\n",
       "      <td>1180</td>\n",
       "      <td>Wonda</td>\n",
       "      <td>Hays</td>\n",
       "      <td>24</td>\n",
       "      <td>New York-Newark-Jersey City, NY-NJ-PA MSA</td>\n",
       "      <td>2018-12-01</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-12-22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>186</th>\n",
       "      <td>1186</td>\n",
       "      <td>Josiah</td>\n",
       "      <td>Douglas</td>\n",
       "      <td>55</td>\n",
       "      <td>Las Vegas-Henderson-Paradise, NV MSA</td>\n",
       "      <td>2018-12-22</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>2018-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>1191</td>\n",
       "      <td>Zack</td>\n",
       "      <td>Waters</td>\n",
       "      <td>75</td>\n",
       "      <td>St. Louis, MO-IL MSA</td>\n",
       "      <td>2018-01-21</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>2018-11-30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>220</th>\n",
       "      <td>1220</td>\n",
       "      <td>Jack</td>\n",
       "      <td>Strong</td>\n",
       "      <td>26</td>\n",
       "      <td>Cincinnati, OH-KY-IN MSA</td>\n",
       "      <td>2018-04-22</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-10-13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>246</th>\n",
       "      <td>1246</td>\n",
       "      <td>Stevie</td>\n",
       "      <td>Moran</td>\n",
       "      <td>69</td>\n",
       "      <td>Tampa-St. Petersburg-Clearwater, FL MSA</td>\n",
       "      <td>2018-01-09</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>2018-07-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269</th>\n",
       "      <td>1269</td>\n",
       "      <td>Irving</td>\n",
       "      <td>Thompson</td>\n",
       "      <td>39</td>\n",
       "      <td>Dallas-Fort Worth-Arlington, TX MSA</td>\n",
       "      <td>2018-09-13</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>2018-12-15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>281</th>\n",
       "      <td>1281</td>\n",
       "      <td>Zack</td>\n",
       "      <td>Hardy</td>\n",
       "      <td>39</td>\n",
       "      <td>Charlotte-Concord-Gastonia, NC-SC MSA</td>\n",
       "      <td>2018-07-23</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-11-14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>1296</td>\n",
       "      <td>Weston</td>\n",
       "      <td>Conley</td>\n",
       "      <td>36</td>\n",
       "      <td>Miami-Fort Lauderdale-West Palm Beach, FL MSA</td>\n",
       "      <td>2018-10-20</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>2018-12-18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>298</th>\n",
       "      <td>1298</td>\n",
       "      <td>Loyce</td>\n",
       "      <td>Cooley</td>\n",
       "      <td>53</td>\n",
       "      <td>Nashville-Davidsonâ€“Murfreesboroâ€“Franklin, TN MSA</td>\n",
       "      <td>2018-09-21</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-12-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>1300</td>\n",
       "      <td>Rene</td>\n",
       "      <td>Frost</td>\n",
       "      <td>23</td>\n",
       "      <td>New York-Newark-Jersey City, NY-NJ-PA MSA</td>\n",
       "      <td>2018-10-21</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-12-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>315</th>\n",
       "      <td>1315</td>\n",
       "      <td>Mora</td>\n",
       "      <td>Schroeder</td>\n",
       "      <td>45</td>\n",
       "      <td>Raleigh-Cary, NC MSA</td>\n",
       "      <td>2018-04-26</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-10-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>358</th>\n",
       "      <td>1358</td>\n",
       "      <td>Vaughn</td>\n",
       "      <td>Maldonado</td>\n",
       "      <td>20</td>\n",
       "      <td>New York-Newark-Jersey City, NY-NJ-PA MSA</td>\n",
       "      <td>2018-04-26</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-10-22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>363</th>\n",
       "      <td>1363</td>\n",
       "      <td>Sandee</td>\n",
       "      <td>Lott</td>\n",
       "      <td>33</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>2018-01-05</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>2018-08-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>402</th>\n",
       "      <td>1402</td>\n",
       "      <td>Jesus</td>\n",
       "      <td>Berry</td>\n",
       "      <td>25</td>\n",
       "      <td>New York-Newark-Jersey City, NY-NJ-PA MSA</td>\n",
       "      <td>2018-06-11</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-12-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>414</th>\n",
       "      <td>1414</td>\n",
       "      <td>Georgianne</td>\n",
       "      <td>Herring</td>\n",
       "      <td>30</td>\n",
       "      <td>Urban Honolulu, HI MSA</td>\n",
       "      <td>2018-03-03</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-09-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>416</th>\n",
       "      <td>1416</td>\n",
       "      <td>Deja</td>\n",
       "      <td>Moss</td>\n",
       "      <td>25</td>\n",
       "      <td>Minneapolis-St. Paul-Bloomington, MN-WI MSA</td>\n",
       "      <td>2018-10-03</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-11-21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>441</th>\n",
       "      <td>1441</td>\n",
       "      <td>Piedad</td>\n",
       "      <td>Myers</td>\n",
       "      <td>23</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell, GA MSA</td>\n",
       "      <td>2018-03-08</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>2018-08-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>451</th>\n",
       "      <td>1451</td>\n",
       "      <td>Lenard</td>\n",
       "      <td>Harding</td>\n",
       "      <td>53</td>\n",
       "      <td>Charlotte-Concord-Gastonia, NC-SC MSA</td>\n",
       "      <td>2018-02-15</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>2018-12-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>466</th>\n",
       "      <td>1466</td>\n",
       "      <td>Alphonse</td>\n",
       "      <td>Harmon</td>\n",
       "      <td>56</td>\n",
       "      <td>Los Angeles-Long Beach-Anaheim, CA MSA</td>\n",
       "      <td>2018-01-26</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-09-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>467</th>\n",
       "      <td>1467</td>\n",
       "      <td>Nickolas</td>\n",
       "      <td>Deleon</td>\n",
       "      <td>64</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell, GA MSA</td>\n",
       "      <td>2018-01-31</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>2018-11-18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>491</th>\n",
       "      <td>1491</td>\n",
       "      <td>Terina</td>\n",
       "      <td>Jensen</td>\n",
       "      <td>22</td>\n",
       "      <td>Grand Rapids-Kentwood, MI MSA</td>\n",
       "      <td>2018-04-27</td>\n",
       "      <td>surf</td>\n",
       "      <td>2018-09-18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_id  first_name  last_name  age  \\\n",
       "6       1006      Jesusa   Bradford   73   \n",
       "12      1012     Jonelle    Mcbride   59   \n",
       "22      1022          Bo       Snow   73   \n",
       "40      1040       Paris     Santos   72   \n",
       "50      1050        Jone       Owen   23   \n",
       "54      1054       Denis      Frost   50   \n",
       "67      1067        Robt      Allen   37   \n",
       "83      1083      Lyndia    Acevedo   65   \n",
       "84      1084       Wiley   Mckinney   21   \n",
       "94      1094      Walter   Petersen   54   \n",
       "106     1106        Eddy   Garrison   47   \n",
       "129     1129       Marin     Bolton   70   \n",
       "172     1172      Weldon   Robinson   72   \n",
       "180     1180       Wonda       Hays   24   \n",
       "186     1186      Josiah    Douglas   55   \n",
       "191     1191        Zack     Waters   75   \n",
       "220     1220        Jack     Strong   26   \n",
       "246     1246      Stevie      Moran   69   \n",
       "269     1269      Irving   Thompson   39   \n",
       "281     1281        Zack      Hardy   39   \n",
       "296     1296      Weston     Conley   36   \n",
       "298     1298       Loyce     Cooley   53   \n",
       "300     1300        Rene      Frost   23   \n",
       "315     1315        Mora  Schroeder   45   \n",
       "358     1358      Vaughn  Maldonado   20   \n",
       "363     1363      Sandee       Lott   33   \n",
       "402     1402       Jesus      Berry   25   \n",
       "414     1414  Georgianne    Herring   30   \n",
       "416     1416        Deja       Moss   25   \n",
       "441     1441      Piedad      Myers   23   \n",
       "451     1451      Lenard    Harding   53   \n",
       "466     1466    Alphonse     Harmon   56   \n",
       "467     1467    Nickolas     Deleon   64   \n",
       "491     1491      Terina     Jensen   22   \n",
       "\n",
       "                                                 city    reg_date      plan  \\\n",
       "6              San Francisco-Oakland-Berkeley, CA MSA  2018-11-27  ultimate   \n",
       "12             Chicago-Naperville-Elgin, IL-IN-WI MSA  2018-06-28      surf   \n",
       "22          New York-Newark-Jersey City, NY-NJ-PA MSA  2018-04-20      surf   \n",
       "40    Philadelphia-Camden-Wilmington, PA-NJ-DE-MD MSA  2018-12-23      surf   \n",
       "50      Miami-Fort Lauderdale-West Palm Beach, FL MSA  2018-03-20  ultimate   \n",
       "54                      Phoenix-Mesa-Chandler, AZ MSA  2018-04-21      surf   \n",
       "67                      Grand Rapids-Kentwood, MI MSA  2018-09-24      surf   \n",
       "83             Los Angeles-Long Beach-Anaheim, CA MSA  2018-10-26      surf   \n",
       "84      Miami-Fort Lauderdale-West Palm Beach, FL MSA  2018-06-04      surf   \n",
       "94             Los Angeles-Long Beach-Anaheim, CA MSA  2018-10-30      surf   \n",
       "106         New York-Newark-Jersey City, NY-NJ-PA MSA  2018-05-10      surf   \n",
       "129                               Baton Rouge, LA MSA  2018-11-10      surf   \n",
       "172                Boston-Cambridge-Newton, MA-NH MSA  2018-03-30      surf   \n",
       "180         New York-Newark-Jersey City, NY-NJ-PA MSA  2018-12-01      surf   \n",
       "186              Las Vegas-Henderson-Paradise, NV MSA  2018-12-22  ultimate   \n",
       "191                              St. Louis, MO-IL MSA  2018-01-21  ultimate   \n",
       "220                          Cincinnati, OH-KY-IN MSA  2018-04-22      surf   \n",
       "246           Tampa-St. Petersburg-Clearwater, FL MSA  2018-01-09  ultimate   \n",
       "269               Dallas-Fort Worth-Arlington, TX MSA  2018-09-13  ultimate   \n",
       "281             Charlotte-Concord-Gastonia, NC-SC MSA  2018-07-23      surf   \n",
       "296     Miami-Fort Lauderdale-West Palm Beach, FL MSA  2018-10-20  ultimate   \n",
       "298  Nashville-Davidsonâ€“Murfreesboroâ€“Franklin, TN MSA  2018-09-21      surf   \n",
       "300         New York-Newark-Jersey City, NY-NJ-PA MSA  2018-10-21      surf   \n",
       "315                              Raleigh-Cary, NC MSA  2018-04-26      surf   \n",
       "358         New York-Newark-Jersey City, NY-NJ-PA MSA  2018-04-26      surf   \n",
       "363                   Seattle-Tacoma-Bellevue, WA MSA  2018-01-05  ultimate   \n",
       "402         New York-Newark-Jersey City, NY-NJ-PA MSA  2018-06-11      surf   \n",
       "414                            Urban Honolulu, HI MSA  2018-03-03      surf   \n",
       "416       Minneapolis-St. Paul-Bloomington, MN-WI MSA  2018-10-03      surf   \n",
       "441             Atlanta-Sandy Springs-Roswell, GA MSA  2018-03-08  ultimate   \n",
       "451             Charlotte-Concord-Gastonia, NC-SC MSA  2018-02-15  ultimate   \n",
       "466            Los Angeles-Long Beach-Anaheim, CA MSA  2018-01-26      surf   \n",
       "467             Atlanta-Sandy Springs-Roswell, GA MSA  2018-01-31  ultimate   \n",
       "491                     Grand Rapids-Kentwood, MI MSA  2018-04-27      surf   \n",
       "\n",
       "     churn_date  \n",
       "6    2018-12-18  \n",
       "12   2018-11-16  \n",
       "22   2018-09-07  \n",
       "40   2018-12-30  \n",
       "50   2018-10-07  \n",
       "54   2018-12-31  \n",
       "67   2018-11-24  \n",
       "83   2018-12-18  \n",
       "84   2018-11-11  \n",
       "94   2018-12-12  \n",
       "106  2018-11-14  \n",
       "129  2018-12-27  \n",
       "172  2018-11-29  \n",
       "180  2018-12-22  \n",
       "186  2018-12-31  \n",
       "191  2018-11-30  \n",
       "220  2018-10-13  \n",
       "246  2018-07-31  \n",
       "269  2018-12-15  \n",
       "281  2018-11-14  \n",
       "296  2018-12-18  \n",
       "298  2018-12-19  \n",
       "300  2018-12-19  \n",
       "315  2018-10-03  \n",
       "358  2018-10-22  \n",
       "363  2018-08-16  \n",
       "402  2018-12-26  \n",
       "414  2018-09-01  \n",
       "416  2018-11-21  \n",
       "441  2018-08-19  \n",
       "451  2018-12-10  \n",
       "466  2018-09-17  \n",
       "467  2018-11-18  \n",
       "491  2018-09-18  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "users_fixed = users.dropna()\n",
    "users_fixed"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Enrich Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Add additional factors to the data if you believe they might be useful.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>plan</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>senior_citizen</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>Anamaria</td>\n",
       "      <td>Bauer</td>\n",
       "      <td>45</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell, GA MSA</td>\n",
       "      <td>2018-12-24</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>Mickey</td>\n",
       "      <td>Wilkerson</td>\n",
       "      <td>28</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>2018-08-13</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>Carlee</td>\n",
       "      <td>Hoffman</td>\n",
       "      <td>36</td>\n",
       "      <td>Las Vegas-Henderson-Paradise, NV MSA</td>\n",
       "      <td>2018-10-21</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>Reynaldo</td>\n",
       "      <td>Jenkins</td>\n",
       "      <td>52</td>\n",
       "      <td>Tulsa, OK MSA</td>\n",
       "      <td>2018-01-28</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1004</td>\n",
       "      <td>Leonila</td>\n",
       "      <td>Thompson</td>\n",
       "      <td>40</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>2018-05-23</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>495</th>\n",
       "      <td>1495</td>\n",
       "      <td>Fidel</td>\n",
       "      <td>Sharpe</td>\n",
       "      <td>67</td>\n",
       "      <td>New York-Newark-Jersey City, NY-NJ-PA MSA</td>\n",
       "      <td>2018-09-04</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>496</th>\n",
       "      <td>1496</td>\n",
       "      <td>Ariel</td>\n",
       "      <td>Shepherd</td>\n",
       "      <td>49</td>\n",
       "      <td>New Orleans-Metairie, LA MSA</td>\n",
       "      <td>2018-02-20</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>497</th>\n",
       "      <td>1497</td>\n",
       "      <td>Donte</td>\n",
       "      <td>Barrera</td>\n",
       "      <td>49</td>\n",
       "      <td>Los Angeles-Long Beach-Anaheim, CA MSA</td>\n",
       "      <td>2018-12-10</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>498</th>\n",
       "      <td>1498</td>\n",
       "      <td>Scot</td>\n",
       "      <td>Williamson</td>\n",
       "      <td>51</td>\n",
       "      <td>New York-Newark-Jersey City, NY-NJ-PA MSA</td>\n",
       "      <td>2018-02-04</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499</th>\n",
       "      <td>1499</td>\n",
       "      <td>Shena</td>\n",
       "      <td>Dickson</td>\n",
       "      <td>37</td>\n",
       "      <td>Orlando-Kissimmee-Sanford, FL MSA</td>\n",
       "      <td>2018-05-06</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>500 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_id first_name   last_name  age  \\\n",
       "0       1000   Anamaria       Bauer   45   \n",
       "1       1001     Mickey   Wilkerson   28   \n",
       "2       1002     Carlee     Hoffman   36   \n",
       "3       1003   Reynaldo     Jenkins   52   \n",
       "4       1004    Leonila    Thompson   40   \n",
       "..       ...        ...         ...  ...   \n",
       "495     1495      Fidel      Sharpe   67   \n",
       "496     1496      Ariel    Shepherd   49   \n",
       "497     1497      Donte     Barrera   49   \n",
       "498     1498       Scot  Williamson   51   \n",
       "499     1499      Shena     Dickson   37   \n",
       "\n",
       "                                          city    reg_date      plan  \\\n",
       "0        Atlanta-Sandy Springs-Roswell, GA MSA  2018-12-24  ultimate   \n",
       "1              Seattle-Tacoma-Bellevue, WA MSA  2018-08-13      surf   \n",
       "2         Las Vegas-Henderson-Paradise, NV MSA  2018-10-21      surf   \n",
       "3                                Tulsa, OK MSA  2018-01-28      surf   \n",
       "4              Seattle-Tacoma-Bellevue, WA MSA  2018-05-23      surf   \n",
       "..                                         ...         ...       ...   \n",
       "495  New York-Newark-Jersey City, NY-NJ-PA MSA  2018-09-04      surf   \n",
       "496               New Orleans-Metairie, LA MSA  2018-02-20      surf   \n",
       "497     Los Angeles-Long Beach-Anaheim, CA MSA  2018-12-10  ultimate   \n",
       "498  New York-Newark-Jersey City, NY-NJ-PA MSA  2018-02-04      surf   \n",
       "499          Orlando-Kissimmee-Sanford, FL MSA  2018-05-06      surf   \n",
       "\n",
       "    churn_date  senior_citizen  \n",
       "0          NaN               0  \n",
       "1          NaN               0  \n",
       "2          NaN               0  \n",
       "3          NaN               0  \n",
       "4          NaN               0  \n",
       "..         ...             ...  \n",
       "495        NaN               1  \n",
       "496        NaN               0  \n",
       "497        NaN               0  \n",
       "498        NaN               0  \n",
       "499        NaN               0  \n",
       "\n",
       "[500 rows x 9 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "users['senior_citizen'] = (users['age'] >= 60).astype(int)\n",
    "\n",
    "# Updated DataFrame with the new column\n",
    "users"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The above series contains the information of Senior Citizens between the age of 45 and 60."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>plan</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>senior_citizen</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>Anamaria</td>\n",
       "      <td>Bauer</td>\n",
       "      <td>45</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell, GA MSA</td>\n",
       "      <td>2018-12-24</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>Mickey</td>\n",
       "      <td>Wilkerson</td>\n",
       "      <td>28</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>2018-08-13</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>Carlee</td>\n",
       "      <td>Hoffman</td>\n",
       "      <td>36</td>\n",
       "      <td>Las Vegas-Henderson-Paradise, NV MSA</td>\n",
       "      <td>2018-10-21</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>Reynaldo</td>\n",
       "      <td>Jenkins</td>\n",
       "      <td>52</td>\n",
       "      <td>Tulsa, OK MSA</td>\n",
       "      <td>2018-01-28</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1004</td>\n",
       "      <td>Leonila</td>\n",
       "      <td>Thompson</td>\n",
       "      <td>40</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>2018-05-23</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>495</th>\n",
       "      <td>1495</td>\n",
       "      <td>Fidel</td>\n",
       "      <td>Sharpe</td>\n",
       "      <td>67</td>\n",
       "      <td>New York-Newark-Jersey City, NY-NJ-PA MSA</td>\n",
       "      <td>2018-09-04</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>496</th>\n",
       "      <td>1496</td>\n",
       "      <td>Ariel</td>\n",
       "      <td>Shepherd</td>\n",
       "      <td>49</td>\n",
       "      <td>New Orleans-Metairie, LA MSA</td>\n",
       "      <td>2018-02-20</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>497</th>\n",
       "      <td>1497</td>\n",
       "      <td>Donte</td>\n",
       "      <td>Barrera</td>\n",
       "      <td>49</td>\n",
       "      <td>Los Angeles-Long Beach-Anaheim, CA MSA</td>\n",
       "      <td>2018-12-10</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>498</th>\n",
       "      <td>1498</td>\n",
       "      <td>Scot</td>\n",
       "      <td>Williamson</td>\n",
       "      <td>51</td>\n",
       "      <td>New York-Newark-Jersey City, NY-NJ-PA MSA</td>\n",
       "      <td>2018-02-04</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>499</th>\n",
       "      <td>1499</td>\n",
       "      <td>Shena</td>\n",
       "      <td>Dickson</td>\n",
       "      <td>37</td>\n",
       "      <td>Orlando-Kissimmee-Sanford, FL MSA</td>\n",
       "      <td>2018-05-06</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>500 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_id first_name   last_name  age  \\\n",
       "0       1000   Anamaria       Bauer   45   \n",
       "1       1001     Mickey   Wilkerson   28   \n",
       "2       1002     Carlee     Hoffman   36   \n",
       "3       1003   Reynaldo     Jenkins   52   \n",
       "4       1004    Leonila    Thompson   40   \n",
       "..       ...        ...         ...  ...   \n",
       "495     1495      Fidel      Sharpe   67   \n",
       "496     1496      Ariel    Shepherd   49   \n",
       "497     1497      Donte     Barrera   49   \n",
       "498     1498       Scot  Williamson   51   \n",
       "499     1499      Shena     Dickson   37   \n",
       "\n",
       "                                          city   reg_date      plan  \\\n",
       "0        Atlanta-Sandy Springs-Roswell, GA MSA 2018-12-24  ultimate   \n",
       "1              Seattle-Tacoma-Bellevue, WA MSA 2018-08-13      surf   \n",
       "2         Las Vegas-Henderson-Paradise, NV MSA 2018-10-21      surf   \n",
       "3                                Tulsa, OK MSA 2018-01-28      surf   \n",
       "4              Seattle-Tacoma-Bellevue, WA MSA 2018-05-23      surf   \n",
       "..                                         ...        ...       ...   \n",
       "495  New York-Newark-Jersey City, NY-NJ-PA MSA 2018-09-04      surf   \n",
       "496               New Orleans-Metairie, LA MSA 2018-02-20      surf   \n",
       "497     Los Angeles-Long Beach-Anaheim, CA MSA 2018-12-10  ultimate   \n",
       "498  New York-Newark-Jersey City, NY-NJ-PA MSA 2018-02-04      surf   \n",
       "499          Orlando-Kissimmee-Sanford, FL MSA 2018-05-06      surf   \n",
       "\n",
       "    churn_date  senior_citizen  \n",
       "0          NaN               0  \n",
       "1          NaN               0  \n",
       "2          NaN               0  \n",
       "3          NaN               0  \n",
       "4          NaN               0  \n",
       "..         ...             ...  \n",
       "495        NaN               1  \n",
       "496        NaN               0  \n",
       "497        NaN               0  \n",
       "498        NaN               0  \n",
       "499        NaN               0  \n",
       "\n",
       "[500 rows x 9 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "users['reg_date'] = pd.to_datetime(users['reg_date'])\n",
    "users"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_93</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>8.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_145</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>13.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_247</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>14.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_309</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>5.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_380</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>4.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137730</th>\n",
       "      <td>1499_199</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-11-21</td>\n",
       "      <td>8.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137731</th>\n",
       "      <td>1499_200</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-10-20</td>\n",
       "      <td>10.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137732</th>\n",
       "      <td>1499_201</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-09-21</td>\n",
       "      <td>8.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137733</th>\n",
       "      <td>1499_202</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-10-10</td>\n",
       "      <td>0.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137734</th>\n",
       "      <td>1499_203</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>13.86</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>137735 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              id  user_id  call_date  duration\n",
       "0        1000_93     1000 2018-12-27      8.52\n",
       "1       1000_145     1000 2018-12-27     13.66\n",
       "2       1000_247     1000 2018-12-27     14.48\n",
       "3       1000_309     1000 2018-12-28      5.76\n",
       "4       1000_380     1000 2018-12-30      4.22\n",
       "...          ...      ...        ...       ...\n",
       "137730  1499_199     1499 2018-11-21      8.72\n",
       "137731  1499_200     1499 2018-10-20     10.89\n",
       "137732  1499_201     1499 2018-09-21      8.12\n",
       "137733  1499_202     1499 2018-10-10      0.37\n",
       "137734  1499_203     1499 2018-12-29     13.86\n",
       "\n",
       "[137735 rows x 4 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "calls['call_date'] = pd.to_datetime(calls['call_date'], format='%Y-%m-%d')\n",
    "calls"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment</h2>\n",
    "    \n",
    "You can use **parse_dates**: `parse_dates=['call_date']` when reading data. Pandas will try to automatically convert this list of columns to datetime. This is a good [article](https://towardsdatascience.com/4-tricks-you-should-know-to-parse-date-columns-with-pandas-read-csv-27355bb2ad0e) with the examples.\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 137735 entries, 0 to 137734\n",
      "Data columns (total 4 columns):\n",
      " #   Column     Non-Null Count   Dtype         \n",
      "---  ------     --------------   -----         \n",
      " 0   id         137735 non-null  object        \n",
      " 1   user_id    137735 non-null  int64         \n",
      " 2   call_date  137735 non-null  datetime64[ns]\n",
      " 3   duration   137735 non-null  float64       \n",
      "dtypes: datetime64[ns](1), float64(1), int64(1), object(1)\n",
      "memory usage: 4.2+ MB\n"
     ]
    }
   ],
   "source": [
    "# Print the general/summary information about the calls' DataFrame\n",
    "calls.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 137734 calls "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_93</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>8.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_145</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>13.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_247</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>14.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_309</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>5.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_380</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>4.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1000_388</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>2.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1000_510</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>5.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1000_521</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>14.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1000_530</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>5.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1000_544</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-26</td>\n",
       "      <td>4.40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id  call_date  duration\n",
       "0   1000_93     1000 2018-12-27      8.52\n",
       "1  1000_145     1000 2018-12-27     13.66\n",
       "2  1000_247     1000 2018-12-27     14.48\n",
       "3  1000_309     1000 2018-12-28      5.76\n",
       "4  1000_380     1000 2018-12-30      4.22\n",
       "5  1000_388     1000 2018-12-31      2.20\n",
       "6  1000_510     1000 2018-12-27      5.75\n",
       "7  1000_521     1000 2018-12-28     14.18\n",
       "8  1000_530     1000 2018-12-28      5.77\n",
       "9  1000_544     1000 2018-12-26      4.40"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Print a sample of data for calls\n",
    "calls.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Describe what you see and notice in the general information and the printed data sample for the above price of data. Are there any issues (inappropriate data types, missing data etc) that may need further investigation and changes? How that can be fixed?]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fix data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Fix obvious issues with the data given the initial observations.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id           0\n",
       "user_id      0\n",
       "call_date    0\n",
       "duration     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "calls_null = calls.isnull().sum()\n",
    "calls_null.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    False\n",
       "1    False\n",
       "2    False\n",
       "3    False\n",
       "4    False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "calls_duplicated = calls.duplicated()\n",
    "calls_duplicated.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment</b>\n",
    "    \n",
    "Can we rely on the output that hasonly first and last 5 rows?    \n",
    "    \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-warning\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment </b>\n",
    "    \n",
    "Do we need that if there are no missing values?\n",
    " </div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-warning\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment </b>\n",
    "    \n",
    "\n",
    "Sometimes `inplace` does not work properly, so I'd recommend that you rewrite the dataframe explicitly.\n",
    "\n",
    "</div>\n",
    "<div class=\"alert alert-success\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment 2</h2>\n",
    "    \n",
    "Good. \n",
    "    \n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Duplicates dropped"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Enrich data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Add additional factors to the data if you believe they might be useful.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "      <th>call_duration_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_93</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>8.52</td>\n",
       "      <td>Short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_145</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>13.66</td>\n",
       "      <td>Short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_247</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>14.48</td>\n",
       "      <td>Short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_309</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>5.76</td>\n",
       "      <td>Short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_380</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>4.22</td>\n",
       "      <td>Short</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id  call_date  duration call_duration_category\n",
       "0   1000_93     1000 2018-12-27      8.52                  Short\n",
       "1  1000_145     1000 2018-12-27     13.66                  Short\n",
       "2  1000_247     1000 2018-12-27     14.48                  Short\n",
       "3  1000_309     1000 2018-12-28      5.76                  Short\n",
       "4  1000_380     1000 2018-12-30      4.22                  Short"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "calls['call_duration_category'] = pd.cut(calls['duration'], bins=[0, 60, 300, float('inf')], labels=['Short', 'Medium', 'Long'])\n",
    "calls.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Messages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 76051 entries, 0 to 76050\n",
      "Data columns (total 3 columns):\n",
      " #   Column        Non-Null Count  Dtype \n",
      "---  ------        --------------  ----- \n",
      " 0   id            76051 non-null  object\n",
      " 1   user_id       76051 non-null  int64 \n",
      " 2   message_date  76051 non-null  object\n",
      "dtypes: int64(1), object(2)\n",
      "memory usage: 1.7+ MB\n"
     ]
    }
   ],
   "source": [
    "# Print the general/summary information about the messages' DataFrame\n",
    "messages.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>message_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_125</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_160</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_223</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_251</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_255</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1000_346</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1000_386</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1000_413</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1000_502</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1000_525</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id message_date\n",
       "0  1000_125     1000   2018-12-27\n",
       "1  1000_160     1000   2018-12-31\n",
       "2  1000_223     1000   2018-12-31\n",
       "3  1000_251     1000   2018-12-27\n",
       "4  1000_255     1000   2018-12-26\n",
       "5  1000_346     1000   2018-12-29\n",
       "6  1000_386     1000   2018-12-30\n",
       "7  1000_413     1000   2018-12-31\n",
       "8  1000_502     1000   2018-12-27\n",
       "9  1000_525     1000   2018-12-28"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Print a sample of data for messages\n",
    "messages.head(10)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Describe what you see and notice in the general information and the printed data sample for the above price of data. Are there any issues (inappropriate data types, missing data etc) that may need further investigation and changes? How that can be fixed?]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### I noticed that there is a transcation ID for each user"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment</h2>\n",
    "    \n",
    "Good observation. \n",
    "</div>\n",
    "<div class=\"alert alert-warning\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment </h2>\n",
    "    \n",
    "\n",
    "A conclusion should not have a title level :)\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fix data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Fix obvious issues with the data given the initial observations.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>message_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_125</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_160</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_223</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_251</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_255</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76046</th>\n",
       "      <td>1497_526</td>\n",
       "      <td>1497</td>\n",
       "      <td>2018-12-24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76047</th>\n",
       "      <td>1497_536</td>\n",
       "      <td>1497</td>\n",
       "      <td>2018-12-24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76048</th>\n",
       "      <td>1497_547</td>\n",
       "      <td>1497</td>\n",
       "      <td>2018-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76049</th>\n",
       "      <td>1497_558</td>\n",
       "      <td>1497</td>\n",
       "      <td>2018-12-24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76050</th>\n",
       "      <td>1497_613</td>\n",
       "      <td>1497</td>\n",
       "      <td>2018-12-23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>76051 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             id  user_id message_date\n",
       "0      1000_125     1000   2018-12-27\n",
       "1      1000_160     1000   2018-12-31\n",
       "2      1000_223     1000   2018-12-31\n",
       "3      1000_251     1000   2018-12-27\n",
       "4      1000_255     1000   2018-12-26\n",
       "...         ...      ...          ...\n",
       "76046  1497_526     1497   2018-12-24\n",
       "76047  1497_536     1497   2018-12-24\n",
       "76048  1497_547     1497   2018-12-31\n",
       "76049  1497_558     1497   2018-12-24\n",
       "76050  1497_613     1497   2018-12-23\n",
       "\n",
       "[76051 rows x 3 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "# Drop duplicate rows\n",
    "messages.drop_duplicates(inplace=True)\n",
    "\n",
    "# Drop rows with missing values\n",
    "messages.dropna(inplace=True)\n",
    "\n",
    "# Reset index after dropping rows\n",
    "messages.reset_index(drop=True, inplace=True)\n",
    "\n",
    "# Print the cleaned DataFrame\n",
    "messages"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Enrich data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Add additional factors to the data if you believe they might be useful.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>message_date</th>\n",
       "      <th>message_count_per_user</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_125</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_160</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_223</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_251</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_255</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-26</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1000_346</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1000_386</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1000_413</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1000_502</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1000_525</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1000_567</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-25</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1001_1</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-11-14</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1001_2</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-08-17</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1001_5</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-12-05</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1001_7</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-11-28</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1001_9</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-10-23</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1001_10</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-09-01</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1001_11</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-11-18</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1001_17</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-12-11</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1001_18</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-10-01</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>1001_19</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-09-13</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>1001_21</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1001_23</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-08-23</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>1001_25</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-10-10</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1001_30</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-12-14</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>1001_32</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-09-11</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>1001_34</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-10-09</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>1001_35</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-09-18</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>1001_37</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-09-06</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>1001_39</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-09-13</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>1001_44</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-08-19</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>1001_46</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-12-17</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>1001_47</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-12-23</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>1001_48</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-11-08</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>1001_49</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-12-25</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>1001_50</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-10-18</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>1001_52</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-09-20</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>1001_54</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-09-01</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>1001_58</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-12-06</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>1001_60</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-08-22</td>\n",
       "      <td>207</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          id  user_id message_date  message_count_per_user\n",
       "0   1000_125     1000   2018-12-27                      11\n",
       "1   1000_160     1000   2018-12-31                      11\n",
       "2   1000_223     1000   2018-12-31                      11\n",
       "3   1000_251     1000   2018-12-27                      11\n",
       "4   1000_255     1000   2018-12-26                      11\n",
       "5   1000_346     1000   2018-12-29                      11\n",
       "6   1000_386     1000   2018-12-30                      11\n",
       "7   1000_413     1000   2018-12-31                      11\n",
       "8   1000_502     1000   2018-12-27                      11\n",
       "9   1000_525     1000   2018-12-28                      11\n",
       "10  1000_567     1000   2018-12-25                      11\n",
       "11    1001_1     1001   2018-11-14                     207\n",
       "12    1001_2     1001   2018-08-17                     207\n",
       "13    1001_5     1001   2018-12-05                     207\n",
       "14    1001_7     1001   2018-11-28                     207\n",
       "15    1001_9     1001   2018-10-23                     207\n",
       "16   1001_10     1001   2018-09-01                     207\n",
       "17   1001_11     1001   2018-11-18                     207\n",
       "18   1001_17     1001   2018-12-11                     207\n",
       "19   1001_18     1001   2018-10-01                     207\n",
       "20   1001_19     1001   2018-09-13                     207\n",
       "21   1001_21     1001   2018-12-30                     207\n",
       "22   1001_23     1001   2018-08-23                     207\n",
       "23   1001_25     1001   2018-10-10                     207\n",
       "24   1001_30     1001   2018-12-14                     207\n",
       "25   1001_32     1001   2018-09-11                     207\n",
       "26   1001_34     1001   2018-10-09                     207\n",
       "27   1001_35     1001   2018-09-18                     207\n",
       "28   1001_37     1001   2018-09-06                     207\n",
       "29   1001_39     1001   2018-09-13                     207\n",
       "30   1001_44     1001   2018-08-19                     207\n",
       "31   1001_46     1001   2018-12-17                     207\n",
       "32   1001_47     1001   2018-12-23                     207\n",
       "33   1001_48     1001   2018-11-08                     207\n",
       "34   1001_49     1001   2018-12-25                     207\n",
       "35   1001_50     1001   2018-10-18                     207\n",
       "36   1001_52     1001   2018-09-20                     207\n",
       "37   1001_54     1001   2018-09-01                     207\n",
       "38   1001_58     1001   2018-12-06                     207\n",
       "39   1001_60     1001   2018-08-22                     207"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#working code\n",
    "messages['message_count_per_user'] = messages.groupby('user_id')['user_id'].transform('count')\n",
    "messages.head(40)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Internet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 104825 entries, 0 to 104824\n",
      "Data columns (total 4 columns):\n",
      " #   Column        Non-Null Count   Dtype  \n",
      "---  ------        --------------   -----  \n",
      " 0   id            104825 non-null  object \n",
      " 1   user_id       104825 non-null  int64  \n",
      " 2   session_date  104825 non-null  object \n",
      " 3   mb_used       104825 non-null  float64\n",
      "dtypes: float64(1), int64(1), object(2)\n",
      "memory usage: 3.2+ MB\n"
     ]
    }
   ],
   "source": [
    "# Print the general/summary information about the internet DataFrame\n",
    "# working code\n",
    "internet.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>session_date</th>\n",
       "      <th>mb_used</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_13</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>89.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_204</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_379</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>660.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_413</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-26</td>\n",
       "      <td>270.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_442</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>880.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1001_0</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-08-24</td>\n",
       "      <td>284.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1001_3</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-12-09</td>\n",
       "      <td>656.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1001_4</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-11-04</td>\n",
       "      <td>16.97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1001_10</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-11-27</td>\n",
       "      <td>135.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1001_15</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-12-13</td>\n",
       "      <td>761.92</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id session_date  mb_used\n",
       "0   1000_13     1000   2018-12-29    89.86\n",
       "1  1000_204     1000   2018-12-31     0.00\n",
       "2  1000_379     1000   2018-12-28   660.40\n",
       "3  1000_413     1000   2018-12-26   270.99\n",
       "4  1000_442     1000   2018-12-27   880.22\n",
       "5    1001_0     1001   2018-08-24   284.68\n",
       "6    1001_3     1001   2018-12-09   656.04\n",
       "7    1001_4     1001   2018-11-04    16.97\n",
       "8   1001_10     1001   2018-11-27   135.18\n",
       "9   1001_15     1001   2018-12-13   761.92"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Print a sample of data for the internet traffic\n",
    "# working code\n",
    "internet.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### We can say about the zeroes in calls and internet dataframes that the users neither did calls nor used data from their internet data usage."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Describe what you see and notice in the general information and the printed data sample for the above price of data. Are there any issues (inappropriate data types, missing data etc) that may need further investigation and changes? How that can be fixed?]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-warning\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment  </h2>\n",
    "    \n",
    "There are some zeroes in **calls** and **internet** dataframes. What can we say about it? Can they undermine the calculations? \n",
    "\n",
    "</div>\n",
    "<div class=\"alert alert-success\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment 2</h2>\n",
    "    \n",
    "I think that in case a user does not use calls, we do not have any data, while here we have data and date. Therefore, something happened there.     \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fix data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Fix obvious issues with the data given the initial observations.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>session_date</th>\n",
       "      <th>mb_used</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_13</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>89.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_204</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_379</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>660.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_413</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-26</td>\n",
       "      <td>270.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_442</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>880.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104820</th>\n",
       "      <td>1499_215</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-10-20</td>\n",
       "      <td>218.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104821</th>\n",
       "      <td>1499_216</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>304.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104822</th>\n",
       "      <td>1499_217</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-09-22</td>\n",
       "      <td>292.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104823</th>\n",
       "      <td>1499_218</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-12-07</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104824</th>\n",
       "      <td>1499_219</td>\n",
       "      <td>1499</td>\n",
       "      <td>2018-12-24</td>\n",
       "      <td>758.31</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>104825 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              id  user_id session_date  mb_used\n",
       "0        1000_13     1000   2018-12-29    89.86\n",
       "1       1000_204     1000   2018-12-31     0.00\n",
       "2       1000_379     1000   2018-12-28   660.40\n",
       "3       1000_413     1000   2018-12-26   270.99\n",
       "4       1000_442     1000   2018-12-27   880.22\n",
       "...          ...      ...          ...      ...\n",
       "104820  1499_215     1499   2018-10-20   218.06\n",
       "104821  1499_216     1499   2018-12-30   304.72\n",
       "104822  1499_217     1499   2018-09-22   292.75\n",
       "104823  1499_218     1499   2018-12-07     0.00\n",
       "104824  1499_219     1499   2018-12-24   758.31\n",
       "\n",
       "[104825 rows x 4 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "# Drop duplicate rows\n",
    "internet.drop_duplicates(inplace=True)\n",
    "\n",
    "# Drop rows with missing values\n",
    "internet.dropna(inplace=True)\n",
    "\n",
    "# Reset index\n",
    "internet.reset_index(drop=True, inplace=True)\n",
    "\n",
    "internet"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Enrich data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Add additional factors to the data if you believe they might be useful.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>session_date</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>mb_used_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_13</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>89.86</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_204</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>0.00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_379</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>660.40</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_413</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-26</td>\n",
       "      <td>270.99</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_442</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>880.22</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id session_date  mb_used mb_used_category\n",
       "0   1000_13     1000   2018-12-29    89.86              Low\n",
       "1  1000_204     1000   2018-12-31     0.00              NaN\n",
       "2  1000_379     1000   2018-12-28   660.40             High\n",
       "3  1000_413     1000   2018-12-26   270.99           Medium\n",
       "4  1000_442     1000   2018-12-27   880.22             High"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "low_threshold = 100  # low threshold in MB\n",
    "medium_threshold = 500  # Medium threshold in MB\n",
    "\n",
    "# Categorize\n",
    "internet['mb_used_category'] = pd.cut(internet['mb_used'], bins=[0, low_threshold, medium_threshold, float('inf')], labels=['Low', 'Medium', 'High'])\n",
    "\n",
    "internet.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Study plan conditions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[It is critical to understand how the plans work, how users are charged based on their plan subscription. So, we suggest printing out the plan information to view their conditions once again.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2 entries, 0 to 1\n",
      "Data columns (total 9 columns):\n",
      " #   Column                 Non-Null Count  Dtype  \n",
      "---  ------                 --------------  -----  \n",
      " 0   messages_included      2 non-null      int64  \n",
      " 1   mb_per_month_included  2 non-null      int64  \n",
      " 2   minutes_included       2 non-null      int64  \n",
      " 3   usd_monthly_pay        2 non-null      int64  \n",
      " 4   usd_per_gb             2 non-null      int64  \n",
      " 5   usd_per_message        2 non-null      float64\n",
      " 6   usd_per_minute         2 non-null      float64\n",
      " 7   plan_name              2 non-null      object \n",
      " 8   avg_cost_per_mb        2 non-null      float64\n",
      "dtypes: float64(3), int64(5), object(1)\n",
      "memory usage: 272.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "# Print out the plan conditions and make sure they are clear for you\n",
    "\n",
    "# working code\n",
    "plans.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Aggregate data per user\n",
    "\n",
    "[Now, as the data is clean, aggregate data per user per period in order to have just one record per user per period. It should ease the further analysis a lot.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "      <th>call_duration_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_93</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>8.52</td>\n",
       "      <td>Short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_145</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>13.66</td>\n",
       "      <td>Short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_247</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>14.48</td>\n",
       "      <td>Short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_309</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>5.76</td>\n",
       "      <td>Short</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_380</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>4.22</td>\n",
       "      <td>Short</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id  call_date  duration call_duration_category\n",
       "0   1000_93     1000 2018-12-27      8.52                  Short\n",
       "1  1000_145     1000 2018-12-27     13.66                  Short\n",
       "2  1000_247     1000 2018-12-27     14.48                  Short\n",
       "3  1000_309     1000 2018-12-28      5.76                  Short\n",
       "4  1000_380     1000 2018-12-30      4.22                  Short"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#working code\n",
    "calls.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "      <th>call_duration_category</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_93</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>8.52</td>\n",
       "      <td>Short</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_145</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>13.66</td>\n",
       "      <td>Short</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_247</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>14.48</td>\n",
       "      <td>Short</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_309</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>5.76</td>\n",
       "      <td>Short</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_380</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>4.22</td>\n",
       "      <td>Short</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id  call_date  duration call_duration_category  month\n",
       "0   1000_93     1000 2018-12-27      8.52                  Short     12\n",
       "1  1000_145     1000 2018-12-27     13.66                  Short     12\n",
       "2  1000_247     1000 2018-12-27     14.48                  Short     12\n",
       "3  1000_309     1000 2018-12-28      5.76                  Short     12\n",
       "4  1000_380     1000 2018-12-30      4.22                  Short     12"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "calls[\"call_date\"] = pd.to_datetime(calls[\"call_date\"])\n",
    "calls[\"month\"] = calls[\"call_date\"].dt.month\n",
    "calls.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>message_date</th>\n",
       "      <th>message_count_per_user</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_125</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_160</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_223</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_251</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_255</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-26</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id message_date  message_count_per_user  month\n",
       "0  1000_125     1000   2018-12-27                      11     12\n",
       "1  1000_160     1000   2018-12-31                      11     12\n",
       "2  1000_223     1000   2018-12-31                      11     12\n",
       "3  1000_251     1000   2018-12-27                      11     12\n",
       "4  1000_255     1000   2018-12-26                      11     12"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Group\n",
    "messages[\"message_date\"] = pd.to_datetime(messages[\"message_date\"])\n",
    "messages[\"month\"] = messages[\"message_date\"].dt.month\n",
    "messages.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>session_date</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>mb_used_category</th>\n",
       "      <th>month</th>\n",
       "      <th>year_month</th>\n",
       "      <th>total_traffic_mb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_13</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>89.86</td>\n",
       "      <td>Low</td>\n",
       "      <td>12</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>1901.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1001_0</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-08-24</td>\n",
       "      <td>284.68</td>\n",
       "      <td>Medium</td>\n",
       "      <td>8</td>\n",
       "      <td>2018-08</td>\n",
       "      <td>6919.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1001_3</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-12-09</td>\n",
       "      <td>656.04</td>\n",
       "      <td>High</td>\n",
       "      <td>12</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>19369.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1001_4</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-11-04</td>\n",
       "      <td>16.97</td>\n",
       "      <td>Low</td>\n",
       "      <td>11</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>18504.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1001_16</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-10-28</td>\n",
       "      <td>501.53</td>\n",
       "      <td>High</td>\n",
       "      <td>10</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>22330.49</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id session_date  mb_used mb_used_category  month year_month  \\\n",
       "0   1000_13     1000   2018-12-29    89.86              Low     12    2018-12   \n",
       "5    1001_0     1001   2018-08-24   284.68           Medium      8    2018-08   \n",
       "6    1001_3     1001   2018-12-09   656.04             High     12    2018-12   \n",
       "7    1001_4     1001   2018-11-04    16.97              Low     11    2018-11   \n",
       "10  1001_16     1001   2018-10-28   501.53             High     10    2018-10   \n",
       "\n",
       "    total_traffic_mb  \n",
       "0            1901.47  \n",
       "5            6919.15  \n",
       "6           19369.18  \n",
       "7           18504.30  \n",
       "10          22330.49  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the volume of internet traffic used by each user per month. Save the result.\n",
    "\n",
    "# working code\n",
    "\n",
    "# Convert\n",
    "internet['session_date'] = pd.to_datetime(internet['session_date'])\n",
    "internet[\"month\"] = internet[\"session_date\"].dt.month\n",
    "# Extract\n",
    "internet['year_month'] = internet['session_date'].dt.strftime('%Y-%m')\n",
    "# Group\n",
    "internet['total_traffic_mb'] = internet.groupby(['user_id', 'year_month'])['mb_used'].transform('sum')\n",
    "# Drop duplicates\n",
    "internet.drop_duplicates(subset=['user_id', 'year_month'], keep='first', inplace=True)\n",
    "\n",
    "internet.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Put the aggregate data together into one DataFrame so that one record in it would represent what an unique user consumed in a given month.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         1000\n",
       "1         1000\n",
       "2         1000\n",
       "3         1000\n",
       "4         1000\n",
       "          ... \n",
       "137730    1499\n",
       "137731    1499\n",
       "137732    1499\n",
       "137733    1499\n",
       "137734    1499\n",
       "Name: user_id, Length: 137735, dtype: int64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "user_id = calls['user_id']\n",
    "user_id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>plan</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>senior_citizen</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>Anamaria</td>\n",
       "      <td>Bauer</td>\n",
       "      <td>45</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell, GA MSA</td>\n",
       "      <td>2018-12-24</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>Mickey</td>\n",
       "      <td>Wilkerson</td>\n",
       "      <td>28</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>2018-08-13</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>Carlee</td>\n",
       "      <td>Hoffman</td>\n",
       "      <td>36</td>\n",
       "      <td>Las Vegas-Henderson-Paradise, NV MSA</td>\n",
       "      <td>2018-10-21</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>Reynaldo</td>\n",
       "      <td>Jenkins</td>\n",
       "      <td>52</td>\n",
       "      <td>Tulsa, OK MSA</td>\n",
       "      <td>2018-01-28</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1004</td>\n",
       "      <td>Leonila</td>\n",
       "      <td>Thompson</td>\n",
       "      <td>40</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>2018-05-23</td>\n",
       "      <td>surf</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id first_name  last_name  age                                   city  \\\n",
       "0     1000   Anamaria      Bauer   45  Atlanta-Sandy Springs-Roswell, GA MSA   \n",
       "1     1001     Mickey  Wilkerson   28        Seattle-Tacoma-Bellevue, WA MSA   \n",
       "2     1002     Carlee    Hoffman   36   Las Vegas-Henderson-Paradise, NV MSA   \n",
       "3     1003   Reynaldo    Jenkins   52                          Tulsa, OK MSA   \n",
       "4     1004    Leonila   Thompson   40        Seattle-Tacoma-Bellevue, WA MSA   \n",
       "\n",
       "    reg_date      plan churn_date  senior_citizen  \n",
       "0 2018-12-24  ultimate        NaN               0  \n",
       "1 2018-08-13      surf        NaN               0  \n",
       "2 2018-10-21      surf        NaN               0  \n",
       "3 2018-01-28      surf        NaN               0  \n",
       "4 2018-05-23      surf        NaN               0  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "      <th>call_duration_category</th>\n",
       "      <th>month</th>\n",
       "      <th>duration_ceil</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_93</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>8.52</td>\n",
       "      <td>Short</td>\n",
       "      <td>12</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_145</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>13.66</td>\n",
       "      <td>Short</td>\n",
       "      <td>12</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_247</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>14.48</td>\n",
       "      <td>Short</td>\n",
       "      <td>12</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_309</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>5.76</td>\n",
       "      <td>Short</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_380</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>4.22</td>\n",
       "      <td>Short</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id  call_date  duration call_duration_category  month  \\\n",
       "0   1000_93     1000 2018-12-27      8.52                  Short     12   \n",
       "1  1000_145     1000 2018-12-27     13.66                  Short     12   \n",
       "2  1000_247     1000 2018-12-27     14.48                  Short     12   \n",
       "3  1000_309     1000 2018-12-28      5.76                  Short     12   \n",
       "4  1000_380     1000 2018-12-30      4.22                  Short     12   \n",
       "\n",
       "   duration_ceil  \n",
       "0              9  \n",
       "1             14  \n",
       "2             15  \n",
       "3              6  \n",
       "4              5  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Merge the data for calls, minutes, messages, internet based on user_id and month\n",
    "\n",
    "#working code\n",
    "\n",
    "# Ceil\n",
    "\n",
    "calls[\"call_date\"] = pd.to_datetime(calls[\"call_date\"])\n",
    "calls[\"month\"] = calls[\"call_date\"].dt.month\n",
    "calls[\"duration_ceil\"] = calls[\"duration\"].apply(math.ceil)\n",
    "\n",
    "calls.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_duration</th>\n",
       "      <th>number_of_calls</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12</td>\n",
       "      <td>124</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8</td>\n",
       "      <td>182</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9</td>\n",
       "      <td>315</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10</td>\n",
       "      <td>393</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11</td>\n",
       "      <td>426</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  total_duration  number_of_calls\n",
       "0     1000     12             124               16\n",
       "1     1001      8             182               27\n",
       "2     1001      9             315               49\n",
       "3     1001     10             393               65\n",
       "4     1001     11             426               64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "# Monthly Calls\n",
    "# Sum\n",
    "\n",
    "monthly_calls = calls.groupby([\"user_id\", \"month\"]).aggregate(\n",
    "    total_duration=(\"duration_ceil\", \"sum\"), \n",
    "    number_of_calls=(\"duration\", \"count\")\n",
    ").reset_index()\n",
    "\n",
    "monthly_calls.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment</b>\n",
    "    \n",
    "Before we use `sum`, duration values have to be rounded up. Try to use `ceil` method. \n",
    "\n",
    "</div>\n",
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment 2</b>\n",
    "    \n",
    "We have to ceil first and then apply sum method. \n",
    "</div>\n",
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment 3</b>\n",
    "    \n",
    "This time you did not apply ceil at all :) \n",
    "    \n",
    "    \n",
    "Ceil the duration first and only then apply `sum` method. In the code above (cell #43) you used sum first and then ceil. If you are unsure how the method word, just run it: </div>\n",
    "<div class=\"alert alert-success\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment 4</h2>\n",
    "    \n",
    "Correct. \n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your approach. Ceil the sum  1.0\n",
      "What we have to do instead. Ceil first and then sum  2.0\n"
     ]
    }
   ],
   "source": [
    "# Reviewer's code 3\n",
    "\n",
    "print('Your approach. Ceil the sum ', np.ceil(0.1 + 0.2))\n",
    "\n",
    "print('What we have to do instead. Ceil first and then sum ', np.ceil(0.1) + np.ceil(0.2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment 3</b>\n",
    "    \n",
    "I hope you see the difference now. \n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>message_date</th>\n",
       "      <th>message_count_per_user</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_125</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_160</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_223</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_251</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_255</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-26</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id message_date  message_count_per_user  month\n",
       "0  1000_125     1000   2018-12-27                      11     12\n",
       "1  1000_160     1000   2018-12-31                      11     12\n",
       "2  1000_223     1000   2018-12-31                      11     12\n",
       "3  1000_251     1000   2018-12-27                      11     12\n",
       "4  1000_255     1000   2018-12-26                      11     12"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "messages[\"message_date\"] = pd.to_datetime(messages[\"message_date\"])\n",
    "messages[\"month\"] = messages[\"message_date\"].dt.month\n",
    "messages.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>number_of_messages</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1801</th>\n",
       "      <td>1496</td>\n",
       "      <td>9</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1802</th>\n",
       "      <td>1496</td>\n",
       "      <td>10</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1803</th>\n",
       "      <td>1496</td>\n",
       "      <td>11</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1804</th>\n",
       "      <td>1496</td>\n",
       "      <td>12</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1805</th>\n",
       "      <td>1497</td>\n",
       "      <td>12</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1806 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      user_id  month  number_of_messages\n",
       "0        1000     12                  11\n",
       "1        1001      8                  30\n",
       "2        1001      9                  44\n",
       "3        1001     10                  53\n",
       "4        1001     11                  36\n",
       "...       ...    ...                 ...\n",
       "1801     1496      9                  21\n",
       "1802     1496     10                  18\n",
       "1803     1496     11                  13\n",
       "1804     1496     12                  11\n",
       "1805     1497     12                  50\n",
       "\n",
       "[1806 rows x 3 columns]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Merge the data for calls, minutes, messages, internet based on user_id and month\n",
    "\n",
    "#working code\n",
    "monthly_messages = messages.groupby([\"user_id\", \"month\"]).aggregate(number_of_messages = (\"message_date\", \"count\")).reset_index()\n",
    "monthly_messages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>monthly_internet</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12</td>\n",
       "      <td>89.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8</td>\n",
       "      <td>284.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9</td>\n",
       "      <td>727.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10</td>\n",
       "      <td>501.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11</td>\n",
       "      <td>16.97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2272</th>\n",
       "      <td>1498</td>\n",
       "      <td>12</td>\n",
       "      <td>244.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2273</th>\n",
       "      <td>1499</td>\n",
       "      <td>9</td>\n",
       "      <td>116.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2274</th>\n",
       "      <td>1499</td>\n",
       "      <td>10</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2275</th>\n",
       "      <td>1499</td>\n",
       "      <td>11</td>\n",
       "      <td>231.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2276</th>\n",
       "      <td>1499</td>\n",
       "      <td>12</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2277 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      user_id  month  monthly_internet\n",
       "0        1000     12             89.86\n",
       "1        1001      8            284.68\n",
       "2        1001      9            727.29\n",
       "3        1001     10            501.53\n",
       "4        1001     11             16.97\n",
       "...       ...    ...               ...\n",
       "2272     1498     12            244.21\n",
       "2273     1499      9            116.23\n",
       "2274     1499     10              0.00\n",
       "2275     1499     11            231.72\n",
       "2276     1499     12              0.00\n",
       "\n",
       "[2277 rows x 3 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "monthly_internet = internet.groupby([\"user_id\", \"month\"]).aggregate(monthly_internet = (\"mb_used\", \"sum\")).reset_index()\n",
    "monthly_internet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_duration</th>\n",
       "      <th>number_of_calls</th>\n",
       "      <th>number_of_messages</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12</td>\n",
       "      <td>124.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8</td>\n",
       "      <td>182.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9</td>\n",
       "      <td>315.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>44.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10</td>\n",
       "      <td>393.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>53.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11</td>\n",
       "      <td>426.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2286</th>\n",
       "      <td>1349</td>\n",
       "      <td>10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>76.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2287</th>\n",
       "      <td>1349</td>\n",
       "      <td>11</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>72.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2288</th>\n",
       "      <td>1349</td>\n",
       "      <td>12</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>61.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2289</th>\n",
       "      <td>1361</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2290</th>\n",
       "      <td>1482</td>\n",
       "      <td>10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2291 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      user_id  month  total_duration  number_of_calls  number_of_messages\n",
       "0        1000     12           124.0             16.0                11.0\n",
       "1        1001      8           182.0             27.0                30.0\n",
       "2        1001      9           315.0             49.0                44.0\n",
       "3        1001     10           393.0             65.0                53.0\n",
       "4        1001     11           426.0             64.0                36.0\n",
       "...       ...    ...             ...              ...                 ...\n",
       "2286     1349     10             0.0              0.0                76.0\n",
       "2287     1349     11             0.0              0.0                72.0\n",
       "2288     1349     12             0.0              0.0                61.0\n",
       "2289     1361      5             0.0              0.0                 2.0\n",
       "2290     1482     10             0.0              0.0                 2.0\n",
       "\n",
       "[2291 rows x 5 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "monthly_calls_and_messages = monthly_calls.merge(monthly_messages, how = \"outer\", on=[\"user_id\", \"month\"])\n",
    "monthly_calls_and_messages = monthly_calls_and_messages.fillna(0)\n",
    "monthly_calls_and_messages"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment</b>\n",
    "    \n",
    "There are some Nan-s that indicate whether a user used something. Obviously, these are zeros, so we need to replace them with zeros in order to consider them in statistical analysis. \n",
    "    \n",
    "</div>\n",
    "<div class=\"alert alert-success\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment 2</h2>\n",
    "    \n",
    "Correct. \n",
    "    \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-warning\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment  </h2>\n",
    "    \n",
    "It's great that you check the methods you are going to apply. However, I think we can remove this cell :)     \n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>avg_cost_per_mb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>0.002279</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "0                 50                  15360               500   \n",
       "1               1000                  30720              3000   \n",
       "\n",
       "   usd_monthly_pay  usd_per_gb  usd_per_message  usd_per_minute plan_name  \\\n",
       "0               20          10             0.03            0.03      surf   \n",
       "1               70           7             0.01            0.01  ultimate   \n",
       "\n",
       "   avg_cost_per_mb  \n",
       "0         0.001302  \n",
       "1         0.002279  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plans.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_duration</th>\n",
       "      <th>number_of_calls</th>\n",
       "      <th>number_of_messages</th>\n",
       "      <th>monthly_internet</th>\n",
       "      <th>city</th>\n",
       "      <th>plan</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>...</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>avg_cost_per_mb</th>\n",
       "      <th>id</th>\n",
       "      <th>session_date</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>mb_used_category</th>\n",
       "      <th>year_month</th>\n",
       "      <th>total_traffic_mb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12</td>\n",
       "      <td>124.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>89.86</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell, GA MSA</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>...</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>0.002279</td>\n",
       "      <td>1000_13</td>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>89.86</td>\n",
       "      <td>Low</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>1901.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8</td>\n",
       "      <td>182.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>284.68</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_0</td>\n",
       "      <td>2018-08-24</td>\n",
       "      <td>284.68</td>\n",
       "      <td>Medium</td>\n",
       "      <td>2018-08</td>\n",
       "      <td>6919.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9</td>\n",
       "      <td>315.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>727.29</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_17</td>\n",
       "      <td>2018-09-05</td>\n",
       "      <td>727.29</td>\n",
       "      <td>High</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>13314.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10</td>\n",
       "      <td>393.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>501.53</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_16</td>\n",
       "      <td>2018-10-28</td>\n",
       "      <td>501.53</td>\n",
       "      <td>High</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>22330.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11</td>\n",
       "      <td>426.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>16.97</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_4</td>\n",
       "      <td>2018-11-04</td>\n",
       "      <td>16.97</td>\n",
       "      <td>Low</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>18504.30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  total_duration  number_of_calls  number_of_messages  \\\n",
       "0     1000     12           124.0             16.0                11.0   \n",
       "1     1001      8           182.0             27.0                30.0   \n",
       "2     1001      9           315.0             49.0                44.0   \n",
       "3     1001     10           393.0             65.0                53.0   \n",
       "4     1001     11           426.0             64.0                36.0   \n",
       "\n",
       "   monthly_internet                                   city      plan  \\\n",
       "0             89.86  Atlanta-Sandy Springs-Roswell, GA MSA  ultimate   \n",
       "1            284.68        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "2            727.29        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "3            501.53        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "4             16.97        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "\n",
       "   messages_included  mb_per_month_included  ...  usd_per_message  \\\n",
       "0               1000                  30720  ...             0.01   \n",
       "1                 50                  15360  ...             0.03   \n",
       "2                 50                  15360  ...             0.03   \n",
       "3                 50                  15360  ...             0.03   \n",
       "4                 50                  15360  ...             0.03   \n",
       "\n",
       "   usd_per_minute  plan_name  avg_cost_per_mb       id session_date  mb_used  \\\n",
       "0            0.01   ultimate         0.002279  1000_13   2018-12-29    89.86   \n",
       "1            0.03       surf         0.001302   1001_0   2018-08-24   284.68   \n",
       "2            0.03       surf         0.001302  1001_17   2018-09-05   727.29   \n",
       "3            0.03       surf         0.001302  1001_16   2018-10-28   501.53   \n",
       "4            0.03       surf         0.001302   1001_4   2018-11-04    16.97   \n",
       "\n",
       "  mb_used_category year_month  total_traffic_mb  \n",
       "0              Low    2018-12           1901.47  \n",
       "1           Medium    2018-08           6919.15  \n",
       "2             High    2018-09          13314.82  \n",
       "3             High    2018-10          22330.49  \n",
       "4              Low    2018-11          18504.30  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Merge the data for calls, minutes, messages, internet based on user_id and month\n",
    "\n",
    "#working code\n",
    "\n",
    "merged_data = monthly_calls.merge(monthly_messages, how='outer', on= [\"user_id\", \"month\"])\n",
    "merged_data = merged_data.merge(monthly_internet, how = 'outer', on = [\"user_id\", \"month\"])\n",
    "merged_data = merged_data.merge(users[[\"user_id\", \"city\", \"plan\"]], how = \"left\", on = ['user_id'])\n",
    "merged_data = merged_data.merge(plans, how = \"left\", left_on = \"plan\", right_on = \"plan_name\")\n",
    "merged_data = merged_data.merge(internet, how = 'outer', on = [\"user_id\", \"month\"])\n",
    "merged_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment </h2>\n",
    "    \n",
    "Correct. </div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2 entries, 0 to 1\n",
      "Data columns (total 9 columns):\n",
      " #   Column                 Non-Null Count  Dtype  \n",
      "---  ------                 --------------  -----  \n",
      " 0   messages_included      2 non-null      int64  \n",
      " 1   mb_per_month_included  2 non-null      int64  \n",
      " 2   minutes_included       2 non-null      int64  \n",
      " 3   usd_monthly_pay        2 non-null      int64  \n",
      " 4   usd_per_gb             2 non-null      int64  \n",
      " 5   usd_per_message        2 non-null      float64\n",
      " 6   usd_per_minute         2 non-null      float64\n",
      " 7   plan_name              2 non-null      object \n",
      " 8   avg_cost_per_mb        2 non-null      float64\n",
      "dtypes: float64(3), int64(5), object(1)\n",
      "memory usage: 272.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "# Add the plan information\n",
    "#working code\n",
    "plans.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The 'total_minutes' column does not exist in the 'calls' DataFrame.\n"
     ]
    }
   ],
   "source": [
    "# Checking if total_minutes exists in 'calls' dataframe\n",
    "\n",
    "if 'total_minutes' in calls.columns:\n",
    "    print(\"The 'total_minutes' column exists in the 'calls' DataFrame.\")\n",
    "else:\n",
    "    print(\"The 'total_minutes' column does not exist in the 'calls' DataFrame.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['id', 'user_id', 'message_date', 'message_count_per_user', 'month'], dtype='object')"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "messages.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['id', 'user_id', 'call_date', 'duration', 'call_duration_category',\n",
       "       'month', 'duration_ceil'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "calls.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Calculate the monthly revenue from each user (subtract the free package limit from the total number of calls, text messages, and data; multiply the result by the calling plan value; add the monthly charge depending on the calling plan). N.B. This might not be as trivial as just a couple of lines given the plan conditions! So, it's okay to spend some time on it.]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-warning\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment  </h2>\n",
    "    \n",
    "This code repeats the previous cell, so you can create a function.     \n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      89.86\n",
       "5     284.68\n",
       "6     656.04\n",
       "7      16.97\n",
       "10    501.53\n",
       "Name: mb_used, dtype: float64"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "internet['mb_used'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_duration</th>\n",
       "      <th>number_of_calls</th>\n",
       "      <th>number_of_messages</th>\n",
       "      <th>monthly_internet</th>\n",
       "      <th>city</th>\n",
       "      <th>plan</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>...</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>avg_cost_per_mb</th>\n",
       "      <th>id</th>\n",
       "      <th>session_date</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>mb_used_category</th>\n",
       "      <th>year_month</th>\n",
       "      <th>total_traffic_mb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12</td>\n",
       "      <td>124.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>89.86</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell, GA MSA</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>...</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>0.002279</td>\n",
       "      <td>1000_13</td>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>89.86</td>\n",
       "      <td>Low</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>1901.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8</td>\n",
       "      <td>182.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>284.68</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_0</td>\n",
       "      <td>2018-08-24</td>\n",
       "      <td>284.68</td>\n",
       "      <td>Medium</td>\n",
       "      <td>2018-08</td>\n",
       "      <td>6919.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9</td>\n",
       "      <td>315.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>727.29</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_17</td>\n",
       "      <td>2018-09-05</td>\n",
       "      <td>727.29</td>\n",
       "      <td>High</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>13314.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10</td>\n",
       "      <td>393.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>501.53</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_16</td>\n",
       "      <td>2018-10-28</td>\n",
       "      <td>501.53</td>\n",
       "      <td>High</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>22330.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11</td>\n",
       "      <td>426.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>16.97</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_4</td>\n",
       "      <td>2018-11-04</td>\n",
       "      <td>16.97</td>\n",
       "      <td>Low</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>18504.30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  total_duration  number_of_calls  number_of_messages  \\\n",
       "0     1000     12           124.0             16.0                11.0   \n",
       "1     1001      8           182.0             27.0                30.0   \n",
       "2     1001      9           315.0             49.0                44.0   \n",
       "3     1001     10           393.0             65.0                53.0   \n",
       "4     1001     11           426.0             64.0                36.0   \n",
       "\n",
       "   monthly_internet                                   city      plan  \\\n",
       "0             89.86  Atlanta-Sandy Springs-Roswell, GA MSA  ultimate   \n",
       "1            284.68        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "2            727.29        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "3            501.53        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "4             16.97        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "\n",
       "   messages_included  mb_per_month_included  ...  usd_per_message  \\\n",
       "0               1000                  30720  ...             0.01   \n",
       "1                 50                  15360  ...             0.03   \n",
       "2                 50                  15360  ...             0.03   \n",
       "3                 50                  15360  ...             0.03   \n",
       "4                 50                  15360  ...             0.03   \n",
       "\n",
       "   usd_per_minute  plan_name  avg_cost_per_mb       id session_date  mb_used  \\\n",
       "0            0.01   ultimate         0.002279  1000_13   2018-12-29    89.86   \n",
       "1            0.03       surf         0.001302   1001_0   2018-08-24   284.68   \n",
       "2            0.03       surf         0.001302  1001_17   2018-09-05   727.29   \n",
       "3            0.03       surf         0.001302  1001_16   2018-10-28   501.53   \n",
       "4            0.03       surf         0.001302   1001_4   2018-11-04    16.97   \n",
       "\n",
       "  mb_used_category year_month  total_traffic_mb  \n",
       "0              Low    2018-12           1901.47  \n",
       "1           Medium    2018-08           6919.15  \n",
       "2             High    2018-09          13314.82  \n",
       "3             High    2018-10          22330.49  \n",
       "4              Low    2018-11          18504.30  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>avg_cost_per_mb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>0.002279</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "0                 50                  15360               500   \n",
       "1               1000                  30720              3000   \n",
       "\n",
       "   usd_monthly_pay  usd_per_gb  usd_per_message  usd_per_minute plan_name  \\\n",
       "0               20          10             0.03            0.03      surf   \n",
       "1               70           7             0.01            0.01  ultimate   \n",
       "\n",
       "   avg_cost_per_mb  \n",
       "0         0.001302  \n",
       "1         0.002279  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plans.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_duration</th>\n",
       "      <th>number_of_calls</th>\n",
       "      <th>number_of_messages</th>\n",
       "      <th>monthly_internet</th>\n",
       "      <th>city</th>\n",
       "      <th>plan</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>...</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>avg_cost_per_mb</th>\n",
       "      <th>id</th>\n",
       "      <th>session_date</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>mb_used_category</th>\n",
       "      <th>year_month</th>\n",
       "      <th>total_traffic_mb</th>\n",
       "      <th>monthly_revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12</td>\n",
       "      <td>124.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>89.86</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell, GA MSA</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>...</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>0.002279</td>\n",
       "      <td>1000_13</td>\n",
       "      <td>2018-12-29 00:00:00</td>\n",
       "      <td>89.86</td>\n",
       "      <td>Low</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>70.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8</td>\n",
       "      <td>182.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>284.68</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_0</td>\n",
       "      <td>2018-08-24 00:00:00</td>\n",
       "      <td>284.68</td>\n",
       "      <td>Medium</td>\n",
       "      <td>2018-08</td>\n",
       "      <td>6919.15</td>\n",
       "      <td>20.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9</td>\n",
       "      <td>315.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>727.29</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_17</td>\n",
       "      <td>2018-09-05 00:00:00</td>\n",
       "      <td>727.29</td>\n",
       "      <td>High</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>13314.82</td>\n",
       "      <td>20.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10</td>\n",
       "      <td>393.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>501.53</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_16</td>\n",
       "      <td>2018-10-28 00:00:00</td>\n",
       "      <td>501.53</td>\n",
       "      <td>High</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>22330.49</td>\n",
       "      <td>90.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11</td>\n",
       "      <td>426.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>16.97</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_4</td>\n",
       "      <td>2018-11-04 00:00:00</td>\n",
       "      <td>16.97</td>\n",
       "      <td>Low</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>18504.30</td>\n",
       "      <td>60.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  total_duration  number_of_calls  number_of_messages  \\\n",
       "0     1000     12           124.0             16.0                11.0   \n",
       "1     1001      8           182.0             27.0                30.0   \n",
       "2     1001      9           315.0             49.0                44.0   \n",
       "3     1001     10           393.0             65.0                53.0   \n",
       "4     1001     11           426.0             64.0                36.0   \n",
       "\n",
       "   monthly_internet                                   city      plan  \\\n",
       "0             89.86  Atlanta-Sandy Springs-Roswell, GA MSA  ultimate   \n",
       "1            284.68        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "2            727.29        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "3            501.53        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "4             16.97        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "\n",
       "   messages_included  mb_per_month_included  ...  usd_per_minute  plan_name  \\\n",
       "0               1000                  30720  ...            0.01   ultimate   \n",
       "1                 50                  15360  ...            0.03       surf   \n",
       "2                 50                  15360  ...            0.03       surf   \n",
       "3                 50                  15360  ...            0.03       surf   \n",
       "4                 50                  15360  ...            0.03       surf   \n",
       "\n",
       "   avg_cost_per_mb       id         session_date mb_used  mb_used_category  \\\n",
       "0         0.002279  1000_13  2018-12-29 00:00:00   89.86               Low   \n",
       "1         0.001302   1001_0  2018-08-24 00:00:00  284.68            Medium   \n",
       "2         0.001302  1001_17  2018-09-05 00:00:00  727.29              High   \n",
       "3         0.001302  1001_16  2018-10-28 00:00:00  501.53              High   \n",
       "4         0.001302   1001_4  2018-11-04 00:00:00   16.97               Low   \n",
       "\n",
       "  year_month total_traffic_mb  monthly_revenue  \n",
       "0    2018-12          1901.47            70.00  \n",
       "1    2018-08          6919.15            20.00  \n",
       "2    2018-09         13314.82            20.00  \n",
       "3    2018-10         22330.49            90.09  \n",
       "4    2018-11         18504.30            60.00  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the monthly revenue for each user\n",
    "\n",
    "merged_data = merged_data.replace(np.nan, 0)\n",
    "\n",
    "def calculate_monthly_revenue(row):\n",
    "    # Extract\n",
    "    plan_name = row['plan']\n",
    "    monthly_fee = plans.loc[plans['plan_name'] == plan_name, 'usd_monthly_pay'].values[0]\n",
    "    minutes_included = plans.loc[plans['plan_name'] == plan_name, 'minutes_included'].values[0]\n",
    "    messages_included = plans.loc[plans['plan_name'] == plan_name, 'messages_included'].values[0]\n",
    "    mb_per_month_included = plans.loc[plans['plan_name'] == plan_name, 'mb_per_month_included'].values[0]\n",
    "    usd_per_minute = plans.loc[plans['plan_name'] == plan_name, 'usd_per_minute'].values[0]\n",
    "    usd_per_message = plans.loc[plans['plan_name'] == plan_name, 'usd_per_message'].values[0]\n",
    "    usd_per_gb = plans.loc[plans['plan_name'] == plan_name, 'usd_per_gb'].values[0]\n",
    "\n",
    "    # Usage exceeding the plan limits\n",
    "    call_usage = max(0, row['total_duration'] - minutes_included)\n",
    "    message_usage = max(0, row['number_of_messages'] - messages_included)\n",
    "    data_usage = max(0, math.ceil((row['total_traffic_mb'] - mb_per_month_included) / 1024))\n",
    "\n",
    "    # Charges for exceeding the plan limits\n",
    "    call_charge = call_usage * usd_per_minute\n",
    "    message_charge = message_usage * usd_per_message\n",
    "    data_charge = data_usage * usd_per_gb\n",
    "\n",
    "    # Total charge including monthly fee\n",
    "    total_charge = call_charge + message_charge + data_charge + monthly_fee\n",
    "\n",
    "    return total_charge\n",
    "\n",
    "# Monhtly Revenue Calculation\n",
    "merged_data['monthly_revenue'] = merged_data.apply(calculate_monthly_revenue, axis=1)\n",
    "\n",
    "# Display\n",
    "merged_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment 2</b>\n",
    "    \n",
    "- \n",
    "> (data_usage / 1024)\n",
    "    \n",
    "    \n",
    "As I have said before, do not forget to ceil the division result :)\n",
    "\n",
    "    \n",
    "    \n",
    "- There are some Nan-s that indicate whether a user used something. Obviously, these are zeros, so we need to replace them with zeros in order to consider them in statistical analysis. \n",
    "\n",
    "\n",
    "    \n",
    "- Check the calculations please. There's no payments above included amount in the data. Consider my code below. Ultimate users pay only fee, which means overlimits are not considered in the final calculations. </div>\n",
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment 3</b>\n",
    "    \n",
    "    \n",
    "Let me just repeat my comment :)     \n",
    "    \n",
    "    \n",
    "- The dataframe still has missing values. \n",
    "    \n",
    "\n",
    "\n",
    "- You said `For Ultimate plan, only the monthly fee is charged`. Why? What if a person spends 5000 minutes or sends 15000 messages? </div>\n",
    "<div class=\"alert alert-success\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment 4</h2>\n",
    "    \n",
    "Good. \n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 70.,  84., 112., 119.,  91., 126., 140., 182., 154., 168.,  77.,\n",
       "       105.,  98., 133.])"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Reviwer's code 2\n",
    "\n",
    "merged_data.query('plan==\"ultimate\"')['monthly_revenue'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment </h2>\n",
    "    \n",
    "Nice code! You can make it even shorter: \n",
    "    \n",
    "    max(0, (row['total_duration'] - minutes_included) * usd_per_minute)\n",
    "\n",
    "\n",
    "</div>\n",
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment</b>\n",
    "    \n",
    "\n",
    "> max(0, row['usd_per_gb'] - mb_per_month_included)\n",
    "\n",
    "\n",
    "First, is it correct to subtract MB from Gb given 1 GB = 2014 MB? Second, `usd_per_gb` is not the GB amount :)  Try to divide MB by 1024 and then subtract it from GB values. Don't forget to ceil the division result. \n",
    "</div>\n",
    "<div class=\"alert alert-warning\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment  </h2>\n",
    "    \n",
    "An intermediate conclusion would not be redundant here. \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### We can conclude here that a lot of Surf plan users tend to exceed their plan limits and therefore an increase in the monthly cost is increasing which increase the monthly revenue for the cellular provider. Ultimate plan users have a better plan therefore there is a very low probability they would exceed their plan limits."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Study user behaviour"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Calculate some useful descriptive statistics for the aggregated and merged data, which typically reveal an overall picture captured by the data. Draw useful plots to help the understanding. Given that the main task is to compare the plans and decide on which one is more profitable, the statistics and the plots should be calculated on a per-plan basis.]\n",
    "\n",
    "[There are relevant hints in the comments for Calls but they are not provided for Messages and Internet though the principle of statistical study is the same for them as for Calls.]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "      <th>call_duration_category</th>\n",
       "      <th>month</th>\n",
       "      <th>duration_ceil</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_93</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>8.52</td>\n",
       "      <td>Short</td>\n",
       "      <td>12</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_145</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>13.66</td>\n",
       "      <td>Short</td>\n",
       "      <td>12</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_247</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-27</td>\n",
       "      <td>14.48</td>\n",
       "      <td>Short</td>\n",
       "      <td>12</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_309</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-28</td>\n",
       "      <td>5.76</td>\n",
       "      <td>Short</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_380</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-30</td>\n",
       "      <td>4.22</td>\n",
       "      <td>Short</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id  call_date  duration call_duration_category  month  \\\n",
       "0   1000_93     1000 2018-12-27      8.52                  Short     12   \n",
       "1  1000_145     1000 2018-12-27     13.66                  Short     12   \n",
       "2  1000_247     1000 2018-12-27     14.48                  Short     12   \n",
       "3  1000_309     1000 2018-12-28      5.76                  Short     12   \n",
       "4  1000_380     1000 2018-12-30      4.22                  Short     12   \n",
       "\n",
       "   duration_ceil  \n",
       "0              9  \n",
       "1             14  \n",
       "2             15  \n",
       "3              6  \n",
       "4              5  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "calls.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>usd_monthly_pay</th>\n",
       "      <th>usd_per_gb</th>\n",
       "      <th>usd_per_message</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>avg_cost_per_mb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>70</td>\n",
       "      <td>7</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>0.002279</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "0                 50                  15360               500   \n",
       "1               1000                  30720              3000   \n",
       "\n",
       "   usd_monthly_pay  usd_per_gb  usd_per_message  usd_per_minute plan_name  \\\n",
       "0               20          10             0.03            0.03      surf   \n",
       "1               70           7             0.01            0.01  ultimate   \n",
       "\n",
       "   avg_cost_per_mb  \n",
       "0         0.001302  \n",
       "1         0.002279  "
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "plans.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'plan_name' exists in the 'merged_data' DataFrame.\n"
     ]
    }
   ],
   "source": [
    "# Checking if 'plan_name' is in the plans Dataframe\n",
    "if 'plan_name' in merged_data.columns:\n",
    "    print(\"'plan_name' exists in the 'merged_data' DataFrame.\")\n",
    "else:\n",
    "    print(\"'plan_name' does not exist in the 'merged_data' DataFrame.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_duration</th>\n",
       "      <th>number_of_calls</th>\n",
       "      <th>number_of_messages</th>\n",
       "      <th>monthly_internet</th>\n",
       "      <th>city</th>\n",
       "      <th>plan</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>...</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>avg_cost_per_mb</th>\n",
       "      <th>id</th>\n",
       "      <th>session_date</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>mb_used_category</th>\n",
       "      <th>year_month</th>\n",
       "      <th>total_traffic_mb</th>\n",
       "      <th>monthly_revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12</td>\n",
       "      <td>124.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>89.86</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell, GA MSA</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>...</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>0.002279</td>\n",
       "      <td>1000_13</td>\n",
       "      <td>2018-12-29 00:00:00</td>\n",
       "      <td>89.86</td>\n",
       "      <td>Low</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>70.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8</td>\n",
       "      <td>182.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>284.68</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_0</td>\n",
       "      <td>2018-08-24 00:00:00</td>\n",
       "      <td>284.68</td>\n",
       "      <td>Medium</td>\n",
       "      <td>2018-08</td>\n",
       "      <td>6919.15</td>\n",
       "      <td>20.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9</td>\n",
       "      <td>315.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>727.29</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_17</td>\n",
       "      <td>2018-09-05 00:00:00</td>\n",
       "      <td>727.29</td>\n",
       "      <td>High</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>13314.82</td>\n",
       "      <td>20.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10</td>\n",
       "      <td>393.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>501.53</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_16</td>\n",
       "      <td>2018-10-28 00:00:00</td>\n",
       "      <td>501.53</td>\n",
       "      <td>High</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>22330.49</td>\n",
       "      <td>90.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11</td>\n",
       "      <td>426.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>16.97</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_4</td>\n",
       "      <td>2018-11-04 00:00:00</td>\n",
       "      <td>16.97</td>\n",
       "      <td>Low</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>18504.30</td>\n",
       "      <td>60.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  total_duration  number_of_calls  number_of_messages  \\\n",
       "0     1000     12           124.0             16.0                11.0   \n",
       "1     1001      8           182.0             27.0                30.0   \n",
       "2     1001      9           315.0             49.0                44.0   \n",
       "3     1001     10           393.0             65.0                53.0   \n",
       "4     1001     11           426.0             64.0                36.0   \n",
       "\n",
       "   monthly_internet                                   city      plan  \\\n",
       "0             89.86  Atlanta-Sandy Springs-Roswell, GA MSA  ultimate   \n",
       "1            284.68        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "2            727.29        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "3            501.53        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "4             16.97        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "\n",
       "   messages_included  mb_per_month_included  ...  usd_per_minute  plan_name  \\\n",
       "0               1000                  30720  ...            0.01   ultimate   \n",
       "1                 50                  15360  ...            0.03       surf   \n",
       "2                 50                  15360  ...            0.03       surf   \n",
       "3                 50                  15360  ...            0.03       surf   \n",
       "4                 50                  15360  ...            0.03       surf   \n",
       "\n",
       "   avg_cost_per_mb       id         session_date mb_used  mb_used_category  \\\n",
       "0         0.002279  1000_13  2018-12-29 00:00:00   89.86               Low   \n",
       "1         0.001302   1001_0  2018-08-24 00:00:00  284.68            Medium   \n",
       "2         0.001302  1001_17  2018-09-05 00:00:00  727.29              High   \n",
       "3         0.001302  1001_16  2018-10-28 00:00:00  501.53              High   \n",
       "4         0.001302   1001_4  2018-11-04 00:00:00   16.97               Low   \n",
       "\n",
       "  year_month total_traffic_mb  monthly_revenue  \n",
       "0    2018-12          1901.47            70.00  \n",
       "1    2018-08          6919.15            20.00  \n",
       "2    2018-09         13314.82            20.00  \n",
       "3    2018-10         22330.49            90.09  \n",
       "4    2018-11         18504.30            60.00  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compare average duration of calls per each plan per each distinct month. Plot a bar plat to visualize it.\n",
    "\n",
    "average_duration = merged_data.groupby(['plan_name', 'month'])['total_duration'].mean().reset_index()\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "for plan_name, group in average_duration.groupby('plan_name'):\n",
    "    plt.bar(group['month'].astype(str), group['total_duration'], label=plan_name, alpha = 0.6)\n",
    "\n",
    "plt.xlabel('Month')\n",
    "plt.ylabel('Average Call Duration')\n",
    "plt.title('Average Call Duration per Plan per Month')\n",
    "plt.xticks(rotation=45)\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Average Call Duration per Plan per Month')"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# working code\n",
    "\n",
    "monthly_totals = merged_data.groupby([\"plan_name\", \"month\"])[\"total_duration\"].mean().reset_index()\n",
    "\n",
    "sns.barplot(data=monthly_totals, x=\"month\", y=\"total_duration\", hue=\"plan_name\")\n",
    "plt.xlabel('Month')\n",
    "plt.ylabel('Average Call Duration')\n",
    "plt.title('Average Call Duration per Plan per Month')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### As per the above chart, the average call duration for Surf  and Ultimate plan users have approximately the same average call duration between the users."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total minutes used for Surf users: 674423.0\n",
      "Total minutes used for Ultimate users: 309924.0\n"
     ]
    }
   ],
   "source": [
    "# working code\n",
    "surf = merged_data[merged_data['plan'] == 'surf']['total_duration']\n",
    "print(\"Total minutes used for Surf users:\", surf.sum())\n",
    "\n",
    "# Calculate total minutes used for Ultimate users\n",
    "ultimate = merged_data[merged_data['plan'] == 'ultimate']['total_duration']\n",
    "print(\"Total minutes used for Ultimate users:\", ultimate.sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Data Visualization\n",
    "\n",
    "plt.hist(surf, bins=20, label=\"Surf\", alpha=0.5, color='blue')\n",
    "plt.hist(ultimate, bins=20, label=\"Ultimate\", alpha=0.5, color='orange')\n",
    "\n",
    "plt.title(\"Distribution of Total Duration by Plan\")\n",
    "plt.xlabel(\"Total Duration\")\n",
    "plt.ylabel(\"Users\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### More users of the Surf plan spend more time on the call than users of the Ultimate plan."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment 4</b>\n",
    "    \n",
    "Please do not forget about titles and labels. \n",
    "\n",
    "</div>\n",
    "<div class=\"alert alert-success\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment 5</h2>\n",
    "    \n",
    "Nice! \n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Data Visualization\n",
    "sns.boxplot(data=merged_data, x=\"plan_name\", y=\"total_duration\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## We plotted both plans in the same histogram in order to have a better visualization when comparing the plans.\n",
    "## Surf plan users spend more time on calls than Ultimate plan users."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment</b>\n",
    "    \n",
    "- Here and further, take the `merged_data` dataframe and plot histograms without any grouping (neither by user nor by month). We don't need to group data by anything because the idea is to plot a distribution that includes each call's duration, message and internet session. \n",
    "    \n",
    "    \n",
    "- Please make sure that every chart has clear axes labels. In the chart above, `Frequency` may be unclear for a reader. \n",
    "</div>\n",
    "<hr>\n",
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment 2</b>\n",
    "    \n",
    "> merged_data['total_minutes'] = merged_data['total_duration'] + merged_data['number_of_messages'] * 0.5 + merged_data['mb_used'] * 60\n",
    "\n",
    "    \n",
    "Please describe the logic behind that :) Why is that called `minutes`? :) Why don't you use `total_duration`? \n",
    "</div>\n",
    "<hr>\n",
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment 3</b>\n",
    "    \n",
    "Since our goal is to compare two plans, shouldn't we print two histograms?\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Total minutes used: 930286.00. Over 250 users have a duration of calls between 400 and 600 minutes each month."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Calculate the mean and the variable of the call duration to reason on whether users on the different plans have different behaviours for their calls.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     720.000000\n",
       "mean      430.450000\n",
       "std       240.508762\n",
       "min         0.000000\n",
       "25%       260.000000\n",
       "50%       424.000000\n",
       "75%       565.250000\n",
       "max      1369.000000\n",
       "Name: total_duration, dtype: float64"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "merged_data.query(\"plan == 'ultimate'\")['total_duration'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Statistics for the Ultimate Plan:\n",
    "### Mean = 430.450 which is the average call duration for ultimate plan users\n",
    "### Std = 240.508 the data points in the dataset are approximately 240.508 units away from the mean value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "57844.46481223922"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "\n",
    "merged_data.query(\"plan == 'ultimate'\")['total_duration'].var()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Statistics for the Ultimate Plan:\n",
    "### Variance = 57844.464 This indicates that, on average, the dataset's data points differ from the mean value by 57844.464  units"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Duration of Ultimate Plan:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>values</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>metric</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Mean</th>\n",
       "      <td>430.450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Std</th>\n",
       "      <td>240.508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Variance</th>\n",
       "      <td>57844.464</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             values\n",
       "metric             \n",
       "Mean        430.450\n",
       "Std         240.508\n",
       "Variance  57844.464"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "\n",
    "# Calculated mean, std, and variance values\n",
    "mean_value = 430.450\n",
    "std_value = 240.508\n",
    "variance_value = 57844.464\n",
    "\n",
    "# Create a DataFram\n",
    "ultimate_plan = pd.DataFrame({\n",
    "    'metric': ['Mean', 'Std', 'Variance'],\n",
    "    'values': [mean_value, std_value, variance_value]\n",
    "})\n",
    "# Set the 'metric' column as the index\n",
    "ultimate_plan.set_index('metric', inplace=True)\n",
    "\n",
    "# Create a pivot table\n",
    "pivot_table = pd.pivot_table(ultimate_plan, values='values', index=['metric'])\n",
    "\n",
    "print(\"Total Duration of Ultimate Plan:\")\n",
    "pivot_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1573.000000\n",
       "mean      428.749523\n",
       "std       234.453150\n",
       "min         0.000000\n",
       "25%       272.000000\n",
       "50%       425.000000\n",
       "75%       576.000000\n",
       "max      1510.000000\n",
       "Name: total_duration, dtype: float64"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "\n",
    "merged_data.query(\"plan == 'surf'\")['total_duration'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Statistics for the Surf Plan:\n",
    "### Mean = 428.749 which is the average call duration for ultimate plan users\n",
    "### Std = 234.453 the data points in the dataset are approximately 234.453 units away from the mean value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "54968.27946065038"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "\n",
    "merged_data.query(\"plan == 'surf'\")['total_duration'].var()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Statistics for the Surf Plan:\n",
    "### Variance = 54968.279 This indicates that, on average, the dataset's data points differ from the mean value by 54968.279  units"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Duration of Surf Plan:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>values</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>metric</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Mean</th>\n",
       "      <td>430.450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Std</th>\n",
       "      <td>240.508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Variance</th>\n",
       "      <td>57844.464</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             values\n",
       "metric             \n",
       "Mean        430.450\n",
       "Std         240.508\n",
       "Variance  57844.464"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "\n",
    "# Total Call Duration of Surf Plan\n",
    "\n",
    "data = {\n",
    "    'Category': ['A', 'B', 'C', 'A', 'B', 'C'],\n",
    "    'Value': [300, 500, 400, 200, 600, 350]\n",
    "}\n",
    "\n",
    "# Calculated mean, std, and variance values\n",
    "mean_value = 428.749\n",
    "std_value = 234.453\n",
    "variance_value = 54968.279\n",
    "\n",
    "# Create a DataFrame with the specified values, including \"metric\" and \"values\" columns\n",
    "surf_plan = pd.DataFrame({\n",
    "    'metric': ['Mean', 'Std', 'Variance'],\n",
    "    'values': [mean_value, std_value, variance_value]\n",
    "})\n",
    "\n",
    "# Set the 'metric' column as the index\n",
    "surf_plan.set_index('metric', inplace=True)\n",
    "\n",
    "# Create a pivot table\n",
    "pivot_table = pd.pivot_table(ultimate_plan, values='values', index=['metric'])\n",
    "\n",
    "print(\"Total Duration of Surf Plan:\")\n",
    "pivot_table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-warning\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2>  Reviewer's comment 4 </h2>\n",
    "    \n",
    "\n",
    "Good! You can use a pivot table though. \n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment 3</b>\n",
    "    \n",
    "Do it for both plans please.\n",
    "    \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment</b>\n",
    " \n",
    "    \n",
    "- Do not group by anything here as well.     \n",
    "    \n",
    "    \n",
    "- We are also asked about std. Would you add it?     \n",
    "</div>\n",
    "<div class=\"alert alert-warning\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2>  Reviewer's comment 2 </h2>\n",
    "    \n",
    "\n",
    "It would be great if you added a conclusion from these results :)    \n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       124\n",
       "1       182\n",
       "2       315\n",
       "3       393\n",
       "4       426\n",
       "       ... \n",
       "2253    339\n",
       "2254    346\n",
       "2255    385\n",
       "2256    308\n",
       "2257    496\n",
       "Name: total_duration, Length: 2258, dtype: int64"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "monthly_calls['total_duration'].dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot a boxplot to visualize the distribution of the monthly call duration\n",
    "\n",
    "# Assuming 'monthly_calls' is your DataFrame and it contains a 'total_duration' column.\n",
    "plt.figure(figsize=(5, 6))\n",
    "plt.boxplot(monthly_calls['total_duration'].dropna())\n",
    "plt.title('Distribution of Monthly Call Duration')\n",
    "plt.xlabel('Total Duration of Calls')\n",
    "plt.ylabel('User-month')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Between 300 and 550 users spend more time on a phone call than the remaining users. They represent approximately 25% of the total numbers of users."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Formulate conclusions on how the users behave in terms of calling. Is their behaviour different between the plans?]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Messages"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment</b>\n",
    " \n",
    "    \n",
    "The comments I left above are relevant to messages and internet sections, so I will not repeat them.      \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The above bar graph shows that "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total messages used for Surf users: 674423.0\n",
      "Total messages used for Ultimate users: 309924.0\n"
     ]
    }
   ],
   "source": [
    "# working code\n",
    "\n",
    "surf_messages = merged_data[merged_data['plan'] == 'surf']['number_of_messages']\n",
    "print(\"Total messages used for Surf users:\", surf.sum())\n",
    "\n",
    "# Calculate total minutes used for Ultimate users\n",
    "ultimate_messages = merged_data[merged_data['plan'] == 'ultimate']['number_of_messages']\n",
    "print(\"Total messages used for Ultimate users:\", ultimate.sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Surf plan's number of messages histogram\n",
    "# Create the histogram\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(surf_messages, bins=20, color='skyblue', edgecolor='black')\n",
    "\n",
    "# Add labels and title\n",
    "plt.xlabel('Number of Messages')\n",
    "plt.ylabel('Users')\n",
    "plt.title('Distribution of Messages Used by Surf Plan Users')\n",
    "\n",
    "# Display the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## We can interpret from the above histogram that for example, 600 Surf plan users send less than 50 messages, while fewer than 100 Surf plan users send between 0 and 150 messages."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Surf plan's number of messages boxplot\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.boxplot(y=surf_messages)\n",
    "plt.title(\"Number of Messages for Surf Plan\")\n",
    "plt.xlabel(\"Number of Messages\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Ultimate plan's number of messages histogram\n",
    "# Create the histogram\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(ultimate_messages, bins=20, color='orange', edgecolor='black')\n",
    "\n",
    "# Add labels and title\n",
    "plt.xlabel('Number of messages')\n",
    "plt.ylabel('Users')\n",
    "plt.title('Distribution of Messages Used by Ultimate Plan Users')\n",
    "\n",
    "# Display the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment 6</h2>\n",
    "    \n",
    "Correct! You can also display them on one figure. By the way, our dataframe allows us to plot 2 histograms on one graph in grouping:\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Reviewer's code 6\n",
    "\n",
    "merged_data.groupby('plan')['number_of_messages'].plot.hist(alpha=0.5, legend=True, bins=25, figsize=(10,8))\n",
    "\n",
    "plt.legend(['Surf', 'Ultimate'])\n",
    "plt.title('Title')\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## We can interpret from the above histogram that for example, 190 Ultimate plan users send less than 25 messages, while fewer than 10 Ultimate plan users send between 0 and 150 messages."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Ultimate plan's number of messages boxplot\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.boxplot(y=ultimate_messages)\n",
    "plt.title(\"Number of Messages for Ultimate Plan\")\n",
    "plt.ylabel(\"Number of Messages\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Data Visualization\n",
    "\n",
    "sns.boxplot(data=merged_data, x=\"plan_name\", y=\"number_of_messages\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1       30.0\n",
       "2       44.0\n",
       "3       53.0\n",
       "4       36.0\n",
       "5       44.0\n",
       "        ... \n",
       "2282    56.0\n",
       "2286    76.0\n",
       "2287    72.0\n",
       "2288    61.0\n",
       "2289     2.0\n",
       "Name: number_of_messages, Length: 1573, dtype: float64"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "surf_messages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Histogram of Median Number of Messages per Month for Surf and Ultimate plans\n",
    "\n",
    "# Data Visualization\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "# Plot histogram for Surf and Ultimate plans\n",
    "plt.hist([surf_messages, ultimate_messages], bins=np.arange(0, 101, 10), align='left', color=['#FF6B6B', '#4CAF50'], label=['Surf', 'Ultimate'])\n",
    "\n",
    "# Add labels and title\n",
    "plt.xlabel('Number of Messages')\n",
    "plt.ylabel('Users')\n",
    "plt.title('Histogram of Median Number of Messages per Month for Surf and Ultimate Plans')\n",
    "plt.xticks(np.arange(0, 101, 10))\n",
    "\n",
    "# Add legend\n",
    "plt.legend()\n",
    "\n",
    "# Show plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-warning\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment 6</h2>\n",
    "    \n",
    "Bins value is too high. The histograms looks like bar charts. \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### We can conclude from the above histogram that the median number of messages sent by Surf plan users is higher than that of Ultimate plan users."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compare the number of messages users of each plan tend to send each month\n",
    "\n",
    "# Group data by plan and month, show median number of messages for each group calculation\n",
    "median_messages_per_plan = merged_data.groupby(['plan_name', 'month'])['number_of_messages'].median().reset_index()\n",
    "\n",
    "# Pivot Data\n",
    "pivot_table = median_messages_per_plan.pivot(index='month', columns='plan_name', values='number_of_messages')\n",
    "\n",
    "# Plot Data\n",
    "pivot_table.plot(kind='bar', figsize=(10, 6))\n",
    "\n",
    "# Labels\n",
    "plt.xlabel('Month')\n",
    "plt.ylabel('Median Number of Messages')\n",
    "plt.title('Median Number of Messages Sent by Users of Each Plan Each Month')\n",
    "\n",
    "# Plot Figure\n",
    "plt.grid(True)\n",
    "plt.xticks(rotation=45)\n",
    "plt.legend(title='Plan')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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7WIhSZIkdRiQJUmSpA4DsiRJktQxKfogL88jjzzCokWLeOihhwZdyqSxzjrrMGPGDKZNmzboUiRJklZbkzYgL1q0iA022IChoSGSDLqc1V5Vcdddd7Fo0SK23nrrQZcjSZK02pq0XSweeughNt54Y8PxOCVh4403tsVdkiRpDJM2IAOG4xXk9ZIkSRrbpA7IkiRJUq9NmYA8Y1bTF7lXrxmzhvpe81vf+lZ23HFHTjjhhL4fS5IkSeMzaW/SG27xzQv52LylPdvf0Ts/6amDPfPoo49y5513cumll3LDDTf07TiSJElacVOmBXkQHnjgAV7zmtfw4he/mO23355TTz2VoaEh7rzzTgDmzp3LbrvtBsCxxx7L/vvvz6677sr+++/PK1/5ShYvXszs2bO58MILB3gWkiRJ6poyLciD8N3vfpctttiCb3/72wDce++9HHXUUSOuf80113DRRRex7rrrsmDBAvbZZx/mz58/QdVKkiRpPGxBXgU77LAD5513HkcddRQXXnghz3jGM0Zdf99992XdddedoOokSZK0MmxBXgXbbLMN8+bN45xzzuHv/u7v2HPPPVlrrbV4/PHHAZ405vDTn/70QZQpSZKkFWAL8iq49dZbWW+99Xj729/OkUceybx58xgaGuKyyy4D4PTTTx9whZIkSVpRU6YFecutZvV05Iktt5o15jpXXnklRx55JGussQbTpk3js5/9LL/+9a85+OCDOeaYY564QU+SJEmTR6pq0DWMac6cOTV37tzfmXfttdfywhe+cEAVTV5eN0mSNChDMzdj4aIlPd/vrBmbsuCW21d4uySXVdWc4fOnTAuyJEmSVm8LFy2hTun9frNfb0O3fZAlSZKkDgOyJEmS1GFAliRJkjr6HpCTrJnk8iRnt9NbJ7k4yQ1JTk3ytH7XIEmSJI3XRLQgHwZc25n+OHBCVT0PuBs4eAJqkCRJksalrwE5yQzgNcC/t9MB9gC+2a5yMvC6XhxraOZmJOnZa2jmZitdy4EHHsg3v9mc4ic/+UkefPDBJ5btvffe3HPPPat6usyfP59zzjlnlfcjSZKk39XvYd4+CbwH2KCd3hi4p6oebacXAVsub8MkhwCHAGy11VZjHqjXw4b0ariQT37yk7z97W9nvfXWA+hZqJ0/fz5z585l77337sn+JEmS1OhbC3KSfYA7quqyldm+qk6sqjlVNWf69N49Ia+XFixYwPbbb//E9PHHH8+xxx77xPSnP/1pbr31VnbffXd23313AIaGhrjzzjtZsGAB2267LQceeCDbbLMN++23H9/73vfYddddef7zn88ll1wCwCWXXMLLXvYydtppJ/7gD/6An/3sZ/zmN7/hAx/4AKeeeiqzZ8/m1FNP5YEHHuCggw5il112YaedduLMM8+c0GshSZI0VfSzi8WuwL5JFgBfp+la8SlgoyTLWq5nAIv7WMNAHXrooWyxxRacf/75nH/++U9afsMNN3DEEUdw3XXXcd111/HVr36Viy66iOOPP55/+Id/AGDbbbflwgsv5PLLL+dDH/oQ73vf+3ja057Ghz70Id785jczf/583vzmN/PRj36UPfbYg0suuYTzzz+fI488kgceeGCiT1mSJGnS61sXi6o6GjgaIMluwN9W1X5JvgG8kSY0HwA8ZZs6t956a3bYYQcAXvSiF7HnnnuShB122IEFCxYAcO+993LAAQdw/fXXk4RHHnlkufs699xzOeusszj++OMBeOihh7j55pt9rLQkSdIKGsSjpo8Cvp7kI8DlwEkDqKEn1lprLR5//PEnph966KEV2n7ttdd+4v0aa6zxxPQaa6zBo4823bSPOeYYdt99d8444wwWLFjAbrvtttx9VRWnn346L3jBC1bwLCRJktQ1IQ8KqaofVNU+7fubqmqXqnpeVf1ZVT08ETX0w6abbsodd9zBXXfdxcMPP8zZZ5/9pHU22GAD7r///pU+xr333suWWzb3MX7xi18ccb+vetWr+Od//meqCoDLL798pY8pSZL0VDaIFuS+mDVj056NPLFsf2OZNm0aH/jAB9hll13Ycsst2XbbbZ+0ziGHHMJee+31RF/kFfWe97yHAw44gI985CO85jWveWL+7rvvznHHHcfs2bM5+uijOeaYYzj88MPZcccdefzxx9l6662XG9glSZI0uixrcVydzZkzp+bOnfs786699lr7164Er5skSRqUJD0dlveJ/e4HK5Npk1xWVXOGz5+QLhaSJEnSZGFAliRJkjomdUCeDN1DVideL0mSpLFN2oC8zjrrcNdddxn6xqmquOuuu1hnnXUGXYokSdJqbdKOYjFjxgwWLVrE0qVLB13KpLHOOuswY8aMQZchSZK0Wpu0AXnatGlsvfXWgy5DkiRJU8yk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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compare the number of messages users of each plan tend to send each month\n",
    "\n",
    "# Group data by plan and month, show median number of messages for each group\n",
    "median_messages_per_plan = merged_data.groupby(['plan_name', 'month'])['number_of_messages'].median().reset_index()\n",
    "\n",
    "# Pivot the data\n",
    "pivot_table = median_messages_per_plan.pivot(index='month', columns='plan_name', values='number_of_messages')\n",
    "\n",
    "# Create the histogram\n",
    "fig, ax = plt.subplots(figsize=(10, 6))\n",
    "pivot_table.plot(kind='bar', ax=ax, color=['skyblue', 'orange'], edgecolor='black', width=0.8)\n",
    "\n",
    "# Add labels and title\n",
    "ax.set_xlabel('Month')\n",
    "ax.set_ylabel('Median Messages')\n",
    "ax.set_title('Median Messages by Plan per Month')\n",
    "ax.legend()\n",
    "\n",
    "# Adjust the layout and display the plot\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compare the number of messages users of each plan tend to send each month \n",
    "\n",
    "# Group data by plan and month, show median number of messages for each group calculation\n",
    "median_messages_per_plan = merged_data.groupby(['plan_name', 'month'])['number_of_messages'].median().reset_index()\n",
    "\n",
    "# Pivot Data\n",
    "pivot_table = median_messages_per_plan.pivot(index='month', columns='plan_name', values='number_of_messages')\n",
    "\n",
    "# Plotting heatmap\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.heatmap(pivot_table, cmap='viridis', annot=True, fmt=\".1f\", linewidths=.5)\n",
    "plt.title('Median Number of Messages by Plan and Month')\n",
    "plt.xlabel('Plan Name')\n",
    "plt.ylabel('Month')\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1573.000000\n",
       "mean       31.159568\n",
       "std        33.566717\n",
       "min         0.000000\n",
       "25%         3.000000\n",
       "50%        24.000000\n",
       "75%        47.000000\n",
       "max       266.000000\n",
       "Name: number_of_messages, dtype: float64"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "\n",
    "merged_data.query(\"plan == 'surf'\")['number_of_messages'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Statistics of Surf Plan's number of messages:\n",
    "### Mean = 31.159 which is the average call duration for surf plan users\n",
    "### Std = 33.566 the data points in the dataset are approximately 33.566 units away from the mean value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1126.7245219504066"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "\n",
    "merged_data.query(\"plan == 'surf'\")['number_of_messages'].var()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Variance = 1126.724 This indicates that, on average, the dataset's data points differ from the mean value by 1126.724  units"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Messages of Surf Plan:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>values</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>metric</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Mean</th>\n",
       "      <td>31.159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Std</th>\n",
       "      <td>33.566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Variance</th>\n",
       "      <td>1126.724</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            values\n",
       "metric            \n",
       "Mean        31.159\n",
       "Std         33.566\n",
       "Variance  1126.724"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "\n",
    "# Number of Messages of Surf Plan\n",
    "\n",
    "data = {\n",
    "    'Category': ['A', 'B', 'C', 'A', 'B', 'C'],\n",
    "    'Value': [300, 500, 400, 200, 600, 350]\n",
    "}\n",
    "\n",
    "# Calculated mean, std, and variance values\n",
    "mean_value = 31.159\n",
    "std_value = 33.566\n",
    "variance_value = 1126.724\n",
    "\n",
    "# Create a DataFrame with the specified values, including \"metric\" and \"values\" columns\n",
    "surf_plan = pd.DataFrame({\n",
    "    'metric': ['Mean', 'Std', 'Variance'],\n",
    "    'values': [mean_value, std_value, variance_value]\n",
    "})\n",
    "\n",
    "# Set the 'metric' column as the index\n",
    "surf_plan.set_index('metric', inplace=True)\n",
    "\n",
    "# Create a pivot table\n",
    "pivot_table = pd.pivot_table(surf_plan, values='values', index=['metric'])\n",
    "\n",
    "print(\"Number of Messages of Surf Plan:\")\n",
    "pivot_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    720.000000\n",
       "mean      37.551389\n",
       "std       34.767179\n",
       "min        0.000000\n",
       "25%        7.000000\n",
       "50%       30.000000\n",
       "75%       61.000000\n",
       "max      166.000000\n",
       "Name: number_of_messages, dtype: float64"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "\n",
    "merged_data.query(\"plan == 'ultimate'\")['number_of_messages'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Statistics of Surf Plan's number of messages:\n",
    "### Mean = 37.55  which is the average call duration for surf plan users\n",
    "### Std = 34.767 the data points in the dataset are approximately 34.767 units away from the mean value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1208.756743548138"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "\n",
    "merged_data.query(\"plan == 'ultimate'\")['number_of_messages'].var()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Variance = 1208.756 This indicates that, on average, the dataset's data points differ from the mean value by 1208.756  units"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Messages of Ultimate Plan:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>values</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>metric</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Mean</th>\n",
       "      <td>37.550</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Std</th>\n",
       "      <td>34.767</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Variance</th>\n",
       "      <td>1208.756</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            values\n",
       "metric            \n",
       "Mean        37.550\n",
       "Std         34.767\n",
       "Variance  1208.756"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "\n",
    "# Number of Messages of Ultimate \n",
    "\n",
    "data = {\n",
    "    'Category': ['A', 'B', 'C', 'A', 'B', 'C'],\n",
    "    'Value': [300, 500, 400, 200, 600, 350]\n",
    "}\n",
    "\n",
    "# Calculated mean, std, and variance values\n",
    "mean_value = 37.55\n",
    "std_value = 34.767\n",
    "variance_value = 1208.756\n",
    "\n",
    "# Create a DataFrame with the specified values, including \"metric\" and \"values\" columns\n",
    "ultimate_plan = pd.DataFrame({\n",
    "    'metric': ['Mean', 'Std', 'Variance'],\n",
    "    'values': [mean_value, std_value, variance_value]\n",
    "})\n",
    "\n",
    "# Set the 'metric' column as the index\n",
    "ultimate_plan.set_index('metric', inplace=True)\n",
    "\n",
    "# Create a pivot table\n",
    "pivot_table = pd.pivot_table(ultimate_plan, values='values', index=['metric'])\n",
    "\n",
    "print(\"Number of Messages of Ultimate Plan:\")\n",
    "pivot_table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment 2</h2>\n",
    "    \n",
    "Very good.     \n",
    "</div>\n",
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment 2</b>\n",
    "    \n",
    "Don't forget about the statistics please :) </div>\n",
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment 3</b>\n",
    "    \n",
    "Please add two histograms here as well. One per plan. Don't forget about the statistics we are asked in the task: mean, var, and std.\n",
    "</div>\n",
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment 4</b>\n",
    "    \n",
    "There are still no histograms. \n",
    "\n",
    "In the step 3 task, we are asked \n",
    "\n",
    "\n",
    "    Describe the customers' behavior. Find the minutes, texts, and volume of data the users of each plan require per month. Calculate the mean, variance, and standard deviation. Plot histograms. Describe the distributions. \n",
    "\n",
    "\n",
    "\n",
    "Please make sure you did that for calls, messages, and the internet. \n",
    "\n",
    "</div>\n",
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment 5</b>\n",
    "    \n",
    "There are still no histograms for messages. You displayed a bar chart and a couple of boxplots. These are not histograms. There's a histogram for calls. Can you repeat that for the messages and internet?  \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5 Histograms of Calls and 4 Histograms Messages were up there from the begining. \n",
    "# 4 Internet Histograms are below."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Internet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_duration</th>\n",
       "      <th>number_of_calls</th>\n",
       "      <th>number_of_messages</th>\n",
       "      <th>monthly_internet</th>\n",
       "      <th>city</th>\n",
       "      <th>plan</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>...</th>\n",
       "      <th>usd_per_minute</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>avg_cost_per_mb</th>\n",
       "      <th>id</th>\n",
       "      <th>session_date</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>mb_used_category</th>\n",
       "      <th>year_month</th>\n",
       "      <th>total_traffic_mb</th>\n",
       "      <th>monthly_revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12</td>\n",
       "      <td>124.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>89.86</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell, GA MSA</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>...</td>\n",
       "      <td>0.01</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>0.002279</td>\n",
       "      <td>1000_13</td>\n",
       "      <td>2018-12-29 00:00:00</td>\n",
       "      <td>89.86</td>\n",
       "      <td>Low</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>70.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8</td>\n",
       "      <td>182.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>284.68</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_0</td>\n",
       "      <td>2018-08-24 00:00:00</td>\n",
       "      <td>284.68</td>\n",
       "      <td>Medium</td>\n",
       "      <td>2018-08</td>\n",
       "      <td>6919.15</td>\n",
       "      <td>20.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9</td>\n",
       "      <td>315.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>727.29</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_17</td>\n",
       "      <td>2018-09-05 00:00:00</td>\n",
       "      <td>727.29</td>\n",
       "      <td>High</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>13314.82</td>\n",
       "      <td>20.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10</td>\n",
       "      <td>393.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>501.53</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_16</td>\n",
       "      <td>2018-10-28 00:00:00</td>\n",
       "      <td>501.53</td>\n",
       "      <td>High</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>22330.49</td>\n",
       "      <td>90.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11</td>\n",
       "      <td>426.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>16.97</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>0.03</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_4</td>\n",
       "      <td>2018-11-04 00:00:00</td>\n",
       "      <td>16.97</td>\n",
       "      <td>Low</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>18504.30</td>\n",
       "      <td>60.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  total_duration  number_of_calls  number_of_messages  \\\n",
       "0     1000     12           124.0             16.0                11.0   \n",
       "1     1001      8           182.0             27.0                30.0   \n",
       "2     1001      9           315.0             49.0                44.0   \n",
       "3     1001     10           393.0             65.0                53.0   \n",
       "4     1001     11           426.0             64.0                36.0   \n",
       "\n",
       "   monthly_internet                                   city      plan  \\\n",
       "0             89.86  Atlanta-Sandy Springs-Roswell, GA MSA  ultimate   \n",
       "1            284.68        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "2            727.29        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "3            501.53        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "4             16.97        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "\n",
       "   messages_included  mb_per_month_included  ...  usd_per_minute  plan_name  \\\n",
       "0               1000                  30720  ...            0.01   ultimate   \n",
       "1                 50                  15360  ...            0.03       surf   \n",
       "2                 50                  15360  ...            0.03       surf   \n",
       "3                 50                  15360  ...            0.03       surf   \n",
       "4                 50                  15360  ...            0.03       surf   \n",
       "\n",
       "   avg_cost_per_mb       id         session_date mb_used  mb_used_category  \\\n",
       "0         0.002279  1000_13  2018-12-29 00:00:00   89.86               Low   \n",
       "1         0.001302   1001_0  2018-08-24 00:00:00  284.68            Medium   \n",
       "2         0.001302  1001_17  2018-09-05 00:00:00  727.29              High   \n",
       "3         0.001302  1001_16  2018-10-28 00:00:00  501.53              High   \n",
       "4         0.001302   1001_4  2018-11-04 00:00:00   16.97               Low   \n",
       "\n",
       "  year_month total_traffic_mb  monthly_revenue  \n",
       "0    2018-12          1901.47            70.00  \n",
       "1    2018-08          6919.15            20.00  \n",
       "2    2018-09         13314.82            20.00  \n",
       "3    2018-10         22330.49            90.09  \n",
       "4    2018-11         18504.30            60.00  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Data Loading\n",
    "merged_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment 4</b>\n",
    "    \n",
    "Isn't it strange that the internet is analyzed in the **messages** section? \n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "plan\n",
      "surf        24161280\n",
      "ultimate    22118400\n",
      "Name: total_internet_traffic, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# working code\n",
    "merged_data['total_internet_traffic'] = merged_data['mb_per_month_included']\n",
    "\n",
    "# Group the data by plan and calculate the total internet traffic for each plan\n",
    "internet_traffic_per_plan = merged_data.groupby('plan')['total_internet_traffic'].sum()\n",
    "\n",
    "# Print the total internet traffic for each plan\n",
    "print(internet_traffic_per_plan)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>session_date</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>mb_used_category</th>\n",
       "      <th>month</th>\n",
       "      <th>year_month</th>\n",
       "      <th>total_traffic_mb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_13</td>\n",
       "      <td>1000</td>\n",
       "      <td>2018-12-29</td>\n",
       "      <td>89.86</td>\n",
       "      <td>Low</td>\n",
       "      <td>12</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>1901.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1001_0</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-08-24</td>\n",
       "      <td>284.68</td>\n",
       "      <td>Medium</td>\n",
       "      <td>8</td>\n",
       "      <td>2018-08</td>\n",
       "      <td>6919.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1001_3</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-12-09</td>\n",
       "      <td>656.04</td>\n",
       "      <td>High</td>\n",
       "      <td>12</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>19369.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1001_4</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-11-04</td>\n",
       "      <td>16.97</td>\n",
       "      <td>Low</td>\n",
       "      <td>11</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>18504.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1001_16</td>\n",
       "      <td>1001</td>\n",
       "      <td>2018-10-28</td>\n",
       "      <td>501.53</td>\n",
       "      <td>High</td>\n",
       "      <td>10</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>22330.49</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  user_id session_date  mb_used mb_used_category  month year_month  \\\n",
       "0   1000_13     1000   2018-12-29    89.86              Low     12    2018-12   \n",
       "5    1001_0     1001   2018-08-24   284.68           Medium      8    2018-08   \n",
       "6    1001_3     1001   2018-12-09   656.04             High     12    2018-12   \n",
       "7    1001_4     1001   2018-11-04    16.97              Low     11    2018-11   \n",
       "10  1001_16     1001   2018-10-28   501.53             High     10    2018-10   \n",
       "\n",
       "    total_traffic_mb  \n",
       "0            1901.47  \n",
       "5            6919.15  \n",
       "6           19369.18  \n",
       "7           18504.30  \n",
       "10          22330.49  "
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "internet.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>mb_used</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>89.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>2186.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>681.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>69.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1004</td>\n",
       "      <td>2456.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>484</th>\n",
       "      <td>1495</td>\n",
       "      <td>995.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>485</th>\n",
       "      <td>1496</td>\n",
       "      <td>1871.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>486</th>\n",
       "      <td>1497</td>\n",
       "      <td>8.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>487</th>\n",
       "      <td>1498</td>\n",
       "      <td>3093.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>488</th>\n",
       "      <td>1499</td>\n",
       "      <td>347.95</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>489 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_id  mb_used\n",
       "0       1000    89.86\n",
       "1       1001  2186.51\n",
       "2       1002   681.36\n",
       "3       1003    69.67\n",
       "4       1004  2456.55\n",
       "..       ...      ...\n",
       "484     1495   995.40\n",
       "485     1496  1871.27\n",
       "486     1497     8.38\n",
       "487     1498  3093.66\n",
       "488     1499   347.95\n",
       "\n",
       "[489 rows x 2 columns]"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "internet_data_used_per_user = internet.groupby('user_id')['mb_used'].sum().reset_index()\n",
    "internet_data_used_per_user"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-warning\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2>  Reviewer's comment 2 </h2>\n",
    "    \n",
    "\n",
    "You already have this data.    \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment 5</b>\n",
    "    \n",
    "This is a bar chart, not histogram.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     1573.000000\n",
       "mean     16558.283490\n",
       "std       8013.513327\n",
       "min          0.000000\n",
       "25%      11986.520000\n",
       "50%      16829.310000\n",
       "75%      20999.610000\n",
       "max      70931.590000\n",
       "Name: total_traffic_mb, dtype: float64"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code \n",
    "\n",
    "merged_data.query(\"plan == 'surf'\")['total_traffic_mb'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Statistics for the total internet traffic for Surf plan users\n",
    "### Mean = 16558.283 which is the average call duration for ultimate plan users\n",
    "### Std = 8013.5133 the data points in the dataset are approximately 8013.5133 mbs away from the mean value\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "64216395.838027954"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "\n",
    "merged_data.query(\"plan == 'surf'\")['total_traffic_mb'].var()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Variance = 64216395.838 mbs. This indicates that, on average, the dataset's data points differ from the mean value by 64216395.838  units"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Internet Traffic of Surf Plan:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>values</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>metric</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Mean</th>\n",
       "      <td>1.655828e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Std</th>\n",
       "      <td>8.013513e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Variance</th>\n",
       "      <td>6.421640e+07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                values\n",
       "metric                \n",
       "Mean      1.655828e+04\n",
       "Std       8.013513e+03\n",
       "Variance  6.421640e+07"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "\n",
    "# Total Internet Traffic Values of Surf Plan\n",
    "\n",
    "data = {\n",
    "    'Category': ['A', 'B', 'C', 'A', 'B', 'C'],\n",
    "    'Value': [10000000, 500000000, 10000000000, 5000000000, 100000000000]\n",
    "}\n",
    "\n",
    "# Calculated mean, std, and variance values\n",
    "mean_value = 16558.283\n",
    "std_value = 8013.5133\n",
    "variance_value = 64216395.830\n",
    "\n",
    "# Create a DataFrame with the specified values, including \"metric\" and \"values\" columns\n",
    "surf_plan = pd.DataFrame({\n",
    "    'metric': ['Mean', 'Std', 'Variance'],\n",
    "    'values': [mean_value, std_value, variance_value]\n",
    "})\n",
    "\n",
    "# Set the 'metric' column as the index\n",
    "surf_plan.set_index('metric', inplace=True)\n",
    "\n",
    "# Create a pivot table\n",
    "pivot_table = pd.pivot_table(surf_plan, values='values', index=['metric'])\n",
    "\n",
    "print(\"Total Internet Traffic of Surf Plan:\")\n",
    "pivot_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count      720.000000\n",
       "mean     17214.699694\n",
       "std       7851.897435\n",
       "min          0.000000\n",
       "25%      12666.955000\n",
       "50%      16858.340000\n",
       "75%      21014.527500\n",
       "max      46595.330000\n",
       "Name: total_traffic_mb, dtype: float64"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "\n",
    "merged_data.query(\"plan == 'ultimate'\")['total_traffic_mb'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Statistics for the total internet traffic for Ultimate plan users\n",
    "### Mean = 17214.699 which is the average call duration for ultimate plan users\n",
    "### Std = 7851.897 the data points in the dataset are approximately 7851.897 mbs away from the mean value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "61652293.32385832"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "merged_data.query(\"plan == 'ultimate'\")['total_traffic_mb'].var()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Variance = 61652293.323 mbs. This indicates that, on average, the dataset's data points differ from the mean value by 61652293.323  units"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Internet Traffic of Internet Plan:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>values</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>metric</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Mean</th>\n",
       "      <td>1.721470e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Std</th>\n",
       "      <td>7.851897e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Variance</th>\n",
       "      <td>6.165229e+07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                values\n",
       "metric                \n",
       "Mean      1.721470e+04\n",
       "Std       7.851897e+03\n",
       "Variance  6.165229e+07"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "\n",
    "# Total Internet Traffic Values of Ultimate Plan\n",
    "\n",
    "data = {\n",
    "    'Category': ['A', 'B', 'C', 'A', 'B', 'C'],\n",
    "    'Value': [300, 500, 400, 200, 600, 350]\n",
    "}\n",
    "\n",
    "# Calculated mean, std, and variance values\n",
    "mean_value = 17214.699\n",
    "std_value = 7851.897\n",
    "variance_value = 61652293.3238\n",
    "\n",
    "# Create a DataFrame with the specified values, including \"metric\" and \"values\" columns\n",
    "ultimate_plan = pd.DataFrame({\n",
    "    'metric': ['Mean', 'Std', 'Variance'],\n",
    "    'values': [mean_value, std_value, variance_value]\n",
    "})\n",
    "\n",
    "# Set the 'metric' column as the index\n",
    "ultimate_plan.set_index('metric', inplace=True)\n",
    "\n",
    "# Create a pivot table\n",
    "pivot_table = pd.pivot_table(ultimate_plan, values='values', index=['metric'])\n",
    "\n",
    "print(\"Total Internet Traffic of Internet Plan:\")\n",
    "pivot_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total traffic mb for Surf users: 26046179.93\n",
      "Total traffic mb for Ultimate users: 12394583.780000001\n"
     ]
    }
   ],
   "source": [
    "# Total internet traffic for Surf users\n",
    "surf = merged_data[merged_data['plan'] == 'surf']['total_traffic_mb']\n",
    "print(\"Total traffic mb for Surf users:\", surf.sum())\n",
    "\n",
    "# Total inetrnet traffic for Ultimate users\n",
    "ultimate = merged_data[merged_data['plan'] == 'ultimate']['total_traffic_mb']\n",
    "print(\"Total traffic mb for Ultimate users:\", ultimate.sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Distribution of Total Internet Traffic for Surf Plan\n",
    "\n",
    "# Data Visualization\n",
    "\n",
    "# Filter the data for the 'surf' plan\n",
    "surf = merged_data[merged_data['plan'] == 'surf']['total_traffic_mb']\n",
    "\n",
    "# Create the histogram\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(surf, bins=20, color='skyblue', edgecolor='black')\n",
    "\n",
    "# Add labels and title\n",
    "plt.xlabel('Total Traffic (MB)')\n",
    "plt.ylabel('Users')\n",
    "plt.title('Distribution of Total Traffic for Surf Plan')\n",
    "\n",
    "# Display the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Between 1 and 350 Surf plan users consume a minimum of 0 mbs and a maximum of 70,000 mbs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Distribution of Total Internet Traffic for Ultimate Plan\n",
    "\n",
    "# Data Visualization\n",
    "\n",
    "# Filter the data for the 'ultimate' plan\n",
    "ultimate = merged_data[merged_data['plan'] == 'ultimate']['total_traffic_mb']\n",
    "\n",
    "# Create the histogram\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(ultimate, bins=20, color='orange', edgecolor='black')\n",
    "\n",
    "# Add labels and title\n",
    "plt.xlabel('Total Traffic (MB)')\n",
    "plt.ylabel('Users')\n",
    "plt.title('Distribution of Total Traffic for Ultimate Plan')\n",
    "\n",
    "# Display the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Between 1 and 120 Ultimate plan users consume a minimum of 0 mbs and a maximum of 40,000 mbs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Distribution of Total Internet Traffic for Surf Plan and Ultimate Plan\n",
    "\n",
    "# Data Visualization\n",
    "\n",
    "# Filter the data for the 'ultimate' and 'surf' plans\n",
    "ultimate = merged_data[merged_data['plan'] == 'ultimate']['total_traffic_mb']\n",
    "surf = merged_data[merged_data['plan'] == 'surf']['total_traffic_mb']\n",
    "\n",
    "# Create the histogram\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist([ultimate, surf], bins=20, color=['orange', 'skyblue'], edgecolor='black', label=['Ultimate', 'Surf'])\n",
    "\n",
    "# Add labels and title\n",
    "plt.xlabel('Total Traffic (MB)')\n",
    "plt.ylabel('Users')\n",
    "plt.title('Total Traffic: Ultimate vs Surf Plans')\n",
    "plt.legend()\n",
    "\n",
    "# Display the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### In the above histogram, the Total Traffic for Surf plan users is higher than the Total Traffic for Ultimate plan users. For example, around 350 users consume 20,000 mb while 130 user consume 20,000 mb."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='plan_name', ylabel='total_traffic_mb'>"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Distribution of Total Internet Traffic for Surf Plan and Ultimate Plan\n",
    "\n",
    "# Data Visualization\n",
    "\n",
    "sns.boxplot(data=merged_data, x=\"plan_name\", y=\"total_traffic_mb\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### As per the above box plot, it shows that that Surf plan users consume more of their internet plan than Ultimate plan users. For instance, the total internet traffic from Surf users is around 580,000 MB while Ultimate users consume around 270,000 MB. Their behavior is different, which means that the Surf plan is more popular for Internet consuming than the Ultimate plan.Â¶"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Formulate conclusions on how the users behave in terms of messaging. Is their behaviour different between the plans?]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment</b>\n",
    " \n",
    "    \n",
    "Don't forget about histograms and statistics here and further.     \n",
    "</div>\n",
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment 2</b>\n",
    " \n",
    "    \n",
    "This comment is relevant. Please add histograms and statistics. \n",
    "\n",
    "</div>\n",
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment 4</b>\n",
    "    \n",
    "\n",
    "\n",
    "Add internet histograms please. \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ^ There are 4 Internet Histograms in this section."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment 3</b>\n",
    " \n",
    "    \n",
    "Here, in the internet section, add histograms and statistics please. \n",
    "\n",
    "</div>\n",
    "<div class=\"alert alert-success\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment 5</h2>\n",
    "    \n",
    "The structure looks better now. \n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Total Internet Traffic Categories\n",
    "\n",
    "# Data Visualization\n",
    "\n",
    "# Assuming internet is your DataFrame and 'mb_used_category' is a categorical column\n",
    "category_counts = internet['mb_used_category'].value_counts()\n",
    "\n",
    "# Create the histogram\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.hist(category_counts.index, weights=category_counts.values, bins=len(category_counts), color='skyblue', edgecolor='black', alpha=0.7)\n",
    "plt.xlabel('Category')\n",
    "plt.ylabel('Total Internet Traffic (mb)')\n",
    "plt.title('Histogram of Category Counts')\n",
    "plt.xticks(rotation=45)  # Rotate x-axis labels for better readability if needed\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Distribution of Data Usage Categories\n",
    "\n",
    "#Working code\n",
    "category_counts = internet['mb_used_category'].value_counts()\n",
    "\n",
    "# Data Visualization\n",
    "plt.bar(category_counts.index, category_counts.values)\n",
    "plt.xlabel('Data Usage Category')\n",
    "plt.ylabel('Count')\n",
    "plt.title('Distribution of Data Usage Categories')\n",
    "plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for readability\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The Data Usage by users is divided into three categories: Low, Medium, and High. The bar graph indicates that the most amount of users consume medium amount of MB from their internet plan. This indicates that around half of the users tend to be careful with their internet consumption."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Group data by month and Average data usage\n",
    "\n",
    "# Working Code\n",
    "\n",
    "average_traffic_per_month = internet.groupby('month')['total_traffic_mb'].mean()\n",
    "\n",
    "# Data Visualization\n",
    "plt.plot(average_traffic_per_month.index, average_traffic_per_month.values)\n",
    "plt.xlabel('Month')\n",
    "plt.ylabel('Average Data Usage (MB)')\n",
    "plt.title('Average Monthly Internet Traffic')\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The average data usage by users increases every month throughout the year except in April, the internet consumption decreased from approximately 15,000 MB to 13,000 MB and then it increased until it reached more than 18,000 MB in December of the same year. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Formulate conclusions on how the users tend to consume the internet traffic? Is their behaviour different between the plans?]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Revenue"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Likewise you have studied the user behaviour, statistically describe the revenue between the plans.]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>total_duration</th>\n",
       "      <th>number_of_calls</th>\n",
       "      <th>number_of_messages</th>\n",
       "      <th>monthly_internet</th>\n",
       "      <th>city</th>\n",
       "      <th>plan</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>...</th>\n",
       "      <th>plan_name</th>\n",
       "      <th>avg_cost_per_mb</th>\n",
       "      <th>id</th>\n",
       "      <th>session_date</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>mb_used_category</th>\n",
       "      <th>year_month</th>\n",
       "      <th>total_traffic_mb</th>\n",
       "      <th>monthly_revenue</th>\n",
       "      <th>total_internet_traffic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>12</td>\n",
       "      <td>124.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>89.86</td>\n",
       "      <td>Atlanta-Sandy Springs-Roswell, GA MSA</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>...</td>\n",
       "      <td>ultimate</td>\n",
       "      <td>0.002279</td>\n",
       "      <td>1000_13</td>\n",
       "      <td>2018-12-29 00:00:00</td>\n",
       "      <td>89.86</td>\n",
       "      <td>Low</td>\n",
       "      <td>2018-12</td>\n",
       "      <td>1901.47</td>\n",
       "      <td>70.00</td>\n",
       "      <td>30720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>8</td>\n",
       "      <td>182.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>284.68</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_0</td>\n",
       "      <td>2018-08-24 00:00:00</td>\n",
       "      <td>284.68</td>\n",
       "      <td>Medium</td>\n",
       "      <td>2018-08</td>\n",
       "      <td>6919.15</td>\n",
       "      <td>20.00</td>\n",
       "      <td>15360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1001</td>\n",
       "      <td>9</td>\n",
       "      <td>315.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>727.29</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_17</td>\n",
       "      <td>2018-09-05 00:00:00</td>\n",
       "      <td>727.29</td>\n",
       "      <td>High</td>\n",
       "      <td>2018-09</td>\n",
       "      <td>13314.82</td>\n",
       "      <td>20.00</td>\n",
       "      <td>15360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1001</td>\n",
       "      <td>10</td>\n",
       "      <td>393.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>501.53</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_16</td>\n",
       "      <td>2018-10-28 00:00:00</td>\n",
       "      <td>501.53</td>\n",
       "      <td>High</td>\n",
       "      <td>2018-10</td>\n",
       "      <td>22330.49</td>\n",
       "      <td>90.09</td>\n",
       "      <td>15360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1001</td>\n",
       "      <td>11</td>\n",
       "      <td>426.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>36.0</td>\n",
       "      <td>16.97</td>\n",
       "      <td>Seattle-Tacoma-Bellevue, WA MSA</td>\n",
       "      <td>surf</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>...</td>\n",
       "      <td>surf</td>\n",
       "      <td>0.001302</td>\n",
       "      <td>1001_4</td>\n",
       "      <td>2018-11-04 00:00:00</td>\n",
       "      <td>16.97</td>\n",
       "      <td>Low</td>\n",
       "      <td>2018-11</td>\n",
       "      <td>18504.30</td>\n",
       "      <td>60.00</td>\n",
       "      <td>15360</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  total_duration  number_of_calls  number_of_messages  \\\n",
       "0     1000     12           124.0             16.0                11.0   \n",
       "1     1001      8           182.0             27.0                30.0   \n",
       "2     1001      9           315.0             49.0                44.0   \n",
       "3     1001     10           393.0             65.0                53.0   \n",
       "4     1001     11           426.0             64.0                36.0   \n",
       "\n",
       "   monthly_internet                                   city      plan  \\\n",
       "0             89.86  Atlanta-Sandy Springs-Roswell, GA MSA  ultimate   \n",
       "1            284.68        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "2            727.29        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "3            501.53        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "4             16.97        Seattle-Tacoma-Bellevue, WA MSA      surf   \n",
       "\n",
       "   messages_included  mb_per_month_included  ...  plan_name  avg_cost_per_mb  \\\n",
       "0               1000                  30720  ...   ultimate         0.002279   \n",
       "1                 50                  15360  ...       surf         0.001302   \n",
       "2                 50                  15360  ...       surf         0.001302   \n",
       "3                 50                  15360  ...       surf         0.001302   \n",
       "4                 50                  15360  ...       surf         0.001302   \n",
       "\n",
       "        id         session_date  mb_used mb_used_category  year_month  \\\n",
       "0  1000_13  2018-12-29 00:00:00    89.86              Low     2018-12   \n",
       "1   1001_0  2018-08-24 00:00:00   284.68           Medium     2018-08   \n",
       "2  1001_17  2018-09-05 00:00:00   727.29             High     2018-09   \n",
       "3  1001_16  2018-10-28 00:00:00   501.53             High     2018-10   \n",
       "4   1001_4  2018-11-04 00:00:00    16.97              Low     2018-11   \n",
       "\n",
       "  total_traffic_mb monthly_revenue  total_internet_traffic  \n",
       "0          1901.47           70.00                   30720  \n",
       "1          6919.15           20.00                   15360  \n",
       "2         13314.82           20.00                   15360  \n",
       "3         22330.49           90.09                   15360  \n",
       "4         18504.30           60.00                   15360  \n",
       "\n",
       "[5 rows x 25 columns]"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average monthly revenue for Ultimate plan: 72.31388888888888\n",
      "Average monthly revenue for Surf plan: 60.706408137317226\n"
     ]
    }
   ],
   "source": [
    "# Average Monthly Revenue Calculation\n",
    "\n",
    "# Working code\n",
    "\n",
    "ultimate_revenue = merged_data[merged_data['plan'] == 'ultimate']['monthly_revenue'].mean()\n",
    "surf_revenue = merged_data[merged_data['plan'] == 'surf']['monthly_revenue'].mean()\n",
    "\n",
    "print(f\"Average monthly revenue for Ultimate plan: {ultimate_revenue}\")\n",
    "print(f\"Average monthly revenue for Surf plan: {surf_revenue}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>plan</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>surf</th>\n",
       "      <td>1573.0</td>\n",
       "      <td>60.706408</td>\n",
       "      <td>55.388042</td>\n",
       "      <td>20.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>40.36</td>\n",
       "      <td>80.36</td>\n",
       "      <td>590.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ultimate</th>\n",
       "      <td>720.0</td>\n",
       "      <td>72.313889</td>\n",
       "      <td>11.395108</td>\n",
       "      <td>70.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>70.00</td>\n",
       "      <td>70.00</td>\n",
       "      <td>182.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           count       mean        std   min   25%    50%    75%     max\n",
       "plan                                                                    \n",
       "surf      1573.0  60.706408  55.388042  20.0  20.0  40.36  80.36  590.37\n",
       "ultimate   720.0  72.313889  11.395108  70.0  70.0  70.00  70.00  182.00"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "revenue_summary_stats = merged_data.groupby('plan')['monthly_revenue'].describe()\n",
    "\n",
    "# Display the summary statistics\n",
    "revenue_summary_stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Surf Revenue Stats\n",
    "## Mean  = 60.70 which is the average monthly revenue for ultimate plan users\n",
    "## Std = 55.38 the data points in the dataset are approximately 55.38 units away from the mean value\n",
    "\n",
    "# Ultimate Revenue Stats\n",
    "## Mean = 72.313 which is the average monthly revenue for ultimate plan users\n",
    "## Std = 11.39 the data points in the dataset are approximately 11.39 units away from the mean value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "plan\n",
       "surf        3067.835152\n",
       "ultimate     129.848486\n",
       "Name: monthly_revenue, dtype: float64"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "revenue_summary_stats = merged_data.groupby('plan')['monthly_revenue'].var()\n",
    "revenue_summary_stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Surf Revenue Stats\n",
    "## Variance = 3067.83  his indicates that, on average, the dataset's data points differ from the mean value by 3067.83  units.\n",
    "\n",
    "# Ultimate Revenue Stats\n",
    "## Variance = 129.84 his indicates that, on average, the dataset's data points differ from the mean value by 129.84  units."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Revenue Summary Stats of Surf Plan:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>values</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>metric</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Mean</th>\n",
       "      <td>60.700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Std</th>\n",
       "      <td>55.380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Variance</th>\n",
       "      <td>3067.835</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            values\n",
       "metric            \n",
       "Mean        60.700\n",
       "Std         55.380\n",
       "Variance  3067.835"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "\n",
    "# Revenue Summary Stats of Surf Plan\n",
    "\n",
    "data = {\n",
    "    'Category': ['A', 'B', 'C', 'A', 'B', 'C'],\n",
    "    'Value': [300, 500, 400, 200, 600, 350]\n",
    "}\n",
    "\n",
    "# Calculated mean, std, and variance values\n",
    "mean_value = 60.70\n",
    "std_value = 55.38\n",
    "variance_value = 3067.835\n",
    "\n",
    "# Create a DataFrame with the specified values, including \"metric\" and \"values\" columns\n",
    "surf_plan = pd.DataFrame({\n",
    "    'metric': ['Mean', 'Std', 'Variance'],\n",
    "    'values': [mean_value, std_value, variance_value]\n",
    "})\n",
    "\n",
    "# Set the 'metric' column as the index\n",
    "surf_plan.set_index('metric', inplace=True)\n",
    "\n",
    "# Create a pivot table\n",
    "pivot_table = pd.pivot_table(surf_plan, values='values', index=['metric'])\n",
    "\n",
    "print(\"Revenue Summary Stats of Surf Plan:\")\n",
    "pivot_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Internet Traffic of Ultimate Plan:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>values</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>metric</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Mean</th>\n",
       "      <td>72.313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Std</th>\n",
       "      <td>11.390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Variance</th>\n",
       "      <td>129.840</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           values\n",
       "metric           \n",
       "Mean       72.313\n",
       "Std        11.390\n",
       "Variance  129.840"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# working code\n",
    "\n",
    "# Revenue Summary Stats of Ultimate Plan\n",
    "\n",
    "data = {\n",
    "    'Category': ['A', 'B', 'C', 'A', 'B', 'C'],\n",
    "    'Value': [300, 500, 400, 200, 600, 350]\n",
    "}\n",
    "\n",
    "# Calculated mean, std, and variance values\n",
    "mean_value = 72.313\n",
    "std_value = 11.39\n",
    "variance_value = 129.84\n",
    "\n",
    "# Create a DataFrame with the specified values, including \"metric\" and \"values\" columns\n",
    "ultimate_plan = pd.DataFrame({\n",
    "    'metric': ['Mean', 'Std', 'Variance'],\n",
    "    'values': [mean_value, std_value, variance_value]\n",
    "})\n",
    "\n",
    "# Set the 'metric' column as the index\n",
    "ultimate_plan.set_index('metric', inplace=True)\n",
    "\n",
    "# Create a pivot table\n",
    "pivot_table = pd.pivot_table(ultimate_plan, values='values', index=['metric'])\n",
    "\n",
    "print(\"Total Internet Traffic of Ultimate Plan:\")\n",
    "pivot_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plan names\n",
    "plans = ['Surf', 'Ultimate']\n",
    "\n",
    "# Average monthly revenue for each plan\n",
    "average_revenue = [60.706408, 72.313889]\n",
    "\n",
    "# Plotting the bar chart\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.bar(plans, average_revenue, color=['skyblue', 'orange'])\n",
    "plt.xlabel('Plan')\n",
    "plt.ylabel('Average Monthly Revenue ($)')\n",
    "plt.title('Average Monthly Revenue: Surf vs. Ultimate Plans')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The Average Monthly revenue from the Ultimate plan is higher than that from the Surf plan. This is because the mean average revenue of the Ultimate plan is 72.313 which is higher than the mean average revenue of the Surf plan which is 60.70."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Formulate conclusions about how the revenue differs between the plans.]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment</h2>\n",
    "    \n",
    "Good job! \n",
    "</div> "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test statistical hypotheses"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Test the hypothesis that the average revenue from users of the Ultimate and Surf calling plans differs.]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Formulate the null and the alternative hypotheses, choose the statistical test, decide on the alpha value.]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## In this hypothesis we are comparing the average revenue from users of the Ultimate and Surf plans. In the Null Hypothesis (H0), Users of the Ultimate plan generate more revenue than the Surf plan. However, in the Alternative H1 hypothesis, users of both plans generate almost the same revenue. We decided to implement the two sample set to help us understand. We chose 0.05 for testing it because it is the most reliable option."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment </b>\n",
    "    \n",
    "    \n",
    "Please, add wordings for both pairs of hypotheses.  H0 and H1 for the 1st hypotheses pair and H0 and H1 for the second one.  Be sure to clarify, why did you decide to use a specific statistical test and you did you choose a specific significance level. \n",
    "\n",
    "</div>\n",
    "<div class=\"alert alert-success\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment 2 </h2>\n",
    "\n",
    "    \n",
    "Good.\n",
    "</div>   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "72.31388888888888"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ultimate_revenue = merged_data[merged_data['plan'] == 'ultimate']['monthly_revenue']\n",
    "average_ultimate_revenue = ultimate_revenue.mean()\n",
    "average_ultimate_revenue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "60.706408137317226"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "surf_revenue = merged_data[merged_data['plan'] == 'surf']['monthly_revenue']\n",
    "average_surf_revenue = surf_revenue.mean()\n",
    "average_surf_revenue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value: 2.862674510698644e-08\n",
      "Fail to Reject H0 (No statistically significant difference found based on sample data)\n"
     ]
    }
   ],
   "source": [
    "# Test the hypotheses\n",
    "\n",
    "# Working code\n",
    "\n",
    "ultimate_revenue = merged_data[merged_data['plan'] == 'ultimate']['monthly_revenue']\n",
    "surf_revenue = merged_data[merged_data['plan'] == 'surf']['monthly_revenue']\n",
    "\n",
    "# Perform t-test\n",
    "results = st.ttest_ind(ultimate_revenue, surf_revenue)\n",
    "\n",
    "alpha = 0.05\n",
    "\n",
    "print(f\"p-value: {results.pvalue}\")\n",
    "\n",
    "if results.pvalue > alpha:\n",
    "    print('Reject H0 (Statistically significant difference in average revenue)')\n",
    "else:\n",
    "    print('Fail to Reject H0 (No statistically significant difference found based on sample data)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        70.0\n",
       "19       70.0\n",
       "20       84.0\n",
       "26       70.0\n",
       "27       70.0\n",
       "        ...  \n",
       "2284    112.0\n",
       "2285     70.0\n",
       "2290     70.0\n",
       "2291     70.0\n",
       "2292     70.0\n",
       "Name: monthly_revenue, Length: 720, dtype: float64"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ultimate_revenue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1        20.00\n",
       "2        20.00\n",
       "3        90.09\n",
       "4        60.00\n",
       "5        60.00\n",
       "         ...  \n",
       "2282    180.18\n",
       "2286     20.78\n",
       "2287     40.66\n",
       "2288     20.33\n",
       "2289     20.00\n",
       "Name: monthly_revenue, Length: 1573, dtype: float64"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "surf_revenue"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## By double checking the average revenue from Surf and Ultimate plans, we made sure the numbers are correct and therefore there is no mistake in P-value which is 2.862674510698644e-08"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-warning\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment</h2>\n",
    "    \n",
    "Any time you see zero or Nan instead of some other number for p-value, it may be reasonable to look for a mistake. \n",
    "    \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# This means that we have enough evidence which is par value of 2.862674510698644e-08 which is less than alpha value which is 0.05. This implies that indeed there is a signifcant difference in average revenue between Surf and Ultimate plans. Ultimate plan has higher revenue than that of the Surf plan. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# According to the revenue_summary_stats table calculated in the Revenue section, the average mean revenue of the Surf plan is 60.70while it is 72.31 for Ultimate plan."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment 4</b>\n",
    "    \n",
    "> Surf plans has much higher revenue than that of the Ultimate plan.\n",
    "    \n",
    "    \n",
    "Please specify where you showed that. The average of surf plan is less than the monthly fee on Ultimate. \n",
    "    \n",
    "\n",
    "</div>\n",
    "<div class=\"alert alert-success\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment 5</h2>\n",
    "    \n",
    "Good. \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Test the hypothesis that the average revenue from users in the NY-NJ area is different from that of the users from the other regions.]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Formulate the null and the alternative hypotheses, choose the statistical test, decide on the alpha value.]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The null hypothesis (H0) states that the average revenue from users in the NYâ€“NJ region is equal to that of users in the other regions. Hypothesis 1 (Alternative): The average revenue received from users in the NYâ€“NJ region differs from that of consumers in the other regions. We compared the means of the two independent samples (NY-NJ and other locations) using the two-sample t-test, we also used alpha = 0.05, which is the most popular option."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment 2</h2>\n",
    "\n",
    "    \n",
    "Correct. The null hypothesis always includes the equality sign. This is because the test does not understand exactly how we set the problem: we can say, for instance, let's make sure that they are not equal. Or that they are equal. And regardless of the purpose of our study, we always put equality at null hypothesis. Then the test result is interpreted correctly.\n",
    "\n",
    "</div>   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Monthly Revenue:\n",
      "NY-NJ: 59.92135278514591\n",
      "Other Regions: 65.22277139874734\n",
      "\n",
      "Statistically significant difference in average revenue (p-value = 0.043557431621342436 )\n"
     ]
    }
   ],
   "source": [
    "# Test the hypotheses\n",
    "# Identify NY-NJ users based on city names containing 'NY-NJ'\n",
    "merged_data['region'] = merged_data['city'].str.contains('NY-NJ')\n",
    "\n",
    "# Group data by region and calculation of average monthly revenue\n",
    "average_revenue_per_region = merged_data.groupby('region')['monthly_revenue'].mean()\n",
    "\n",
    "# Revenue from NY-NJ regions\n",
    "ny_nj_revenue = average_revenue_per_region.get(True)  # Assuming True represents NY-NJ\n",
    "other_regions_revenue = average_revenue_per_region.get(False)  # Assuming False represents other regions\n",
    "\n",
    "# Print\n",
    "print(\"Average Monthly Revenue:\")\n",
    "print(\"NY-NJ:\", ny_nj_revenue)\n",
    "print(\"Other Regions:\", other_regions_revenue)\n",
    "\n",
    "# T-test\n",
    "t_statistic, p_value = st.ttest_ind(merged_data[merged_data['region'] == True]['monthly_revenue'], \n",
    "                                       merged_data[merged_data['region'] == False]['monthly_revenue'])\n",
    "alpha = 0.05  # Significance level\n",
    "\n",
    "if p_value < alpha:\n",
    "  print(\"\\nStatistically significant difference in average revenue (p-value =\", p_value, \")\")\n",
    "else:\n",
    "  print(\"\\nNo statistically significant difference found based on sample data (p-value =\", p_value, \")\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Average Monthly Revenue for NY-NJ region:\n",
    "### NY-NJ: 59.61180371352785\n",
    "### Other Regions: 64.97621085594986 \n",
    "### Statistically significant difference in average revenue between NY-NJ region and other regions.\n",
    "### The monthly revneue from other regions is higher than the monthly revenue from NY-NJ region.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# General conclusion\n",
    "\n",
    "[List your important conclusions in this final section, make sure they cover all those important decisions (assumptions) that you've made and that led you to the way you processed and analyzed the data.]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment</b>\n",
    "    \n",
    "Please make sure each cell works fine. </div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Indications:\n",
    "### Given that the p-value is higher than the conventional threshold of 0.05, it seems improbable that the observed variation in average revenue is the result of random chance.\n",
    "### Reason could be behind high competition from other cellular network providers in NY-NJ areas.\n",
    "### Another reason is that the marketing strategy and the pricing models used would not suitable for NY-NJ areas.\n",
    "### The data consumption is what matters the most when it comes to choosing the user's plan because call duration and messages sent did not exceed the limit, whereas the mb usage exceed the allowed limit in both plans.\n",
    "### The Surf plan is more popular than the Ultimate plan.\n",
    "### The amount of Surf plan users is higher than than Ultimate plan users.\n",
    "### Users tend to use medium frequency of their data usage.\n",
    "### Average data consumption tend to be mild at the begining of the plan and this is normal because the user would be careful with their consumption and then it increases throughout the year.\n",
    "### Ultimate plan bring more amount of revenue to the company than the Surf plan. However, both important for the company's growth and deserves to be ehanced and focused on for better customer experience.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<h2> Reviewer's comment</h2>\n",
    "    \n",
    "The conclusion is written well. \n",
    "\n",
    "</div>\n",
    "\n",
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment</b>\n",
    "    \n",
    "Don't forget to modify it if needed. \n",
    "\n",
    "\n",
    "How can we answer the  main question of this study and why? \n",
    "\n",
    "> Your job is to analyze clients' behavior and determine which prepaid plan brings in more revenue.</div>\n",
    "<div class=\"alert alert-danger\" style=\"border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid \">\n",
    "<b> Reviewer's comment 4</b>\n",
    "    \n",
    "> Both plans brings similar amount of revenue to the company.\n",
    "\n",
    "\n",
    "Do they? </div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  }
 ],
 "metadata": {
  "ExecuteTimeLog": [
   {
    "duration": 828,
    "start_time": "2021-11-16T09:21:11.304Z"
   },
   {
    "duration": 893,
    "start_time": "2021-11-16T09:21:17.728Z"
   },
   {
    "duration": 1150,
    "start_time": "2021-11-16T09:21:29.568Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T09:24:14.495Z"
   },
   {
    "duration": 120,
    "start_time": "2021-11-16T09:24:46.630Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T09:28:27.882Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T09:29:54.281Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T09:30:45.936Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T09:31:06.300Z"
   },
   {
    "duration": 113,
    "start_time": "2021-11-16T09:31:37.208Z"
   },
   {
    "duration": 143,
    "start_time": "2021-11-16T09:31:48.656Z"
   },
   {
    "duration": 98,
    "start_time": "2021-11-16T09:31:55.678Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T09:32:08.535Z"
   },
   {
    "duration": 111,
    "start_time": "2021-11-16T09:32:10.120Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T09:32:15.732Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T09:32:29.423Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:03:03.074Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:10:01.288Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:10:46.923Z"
   },
   {
    "duration": 121,
    "start_time": "2021-11-16T10:37:46.494Z"
   },
   {
    "duration": 125,
    "start_time": "2021-11-16T10:38:20.632Z"
   },
   {
    "duration": 112,
    "start_time": "2021-11-16T10:46:53.001Z"
   },
   {
    "duration": 110,
    "start_time": "2021-11-16T10:48:25.775Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:50:18.720Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T10:50:37.649Z"
   },
   {
    "duration": 2,
    "start_time": "2021-11-16T10:50:51.884Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:51:56.237Z"
   },
   {
    "duration": 101,
    "start_time": "2021-11-16T10:53:13.791Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:55:59.186Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:56:10.751Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:56:49.038Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:56:49.174Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T10:56:49.414Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:56:49.680Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T10:56:50.370Z"
   },
   {
    "duration": 114,
    "start_time": "2021-11-16T10:59:34.518Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:01:41.201Z"
   },
   {
    "duration": 116,
    "start_time": "2021-11-16T11:01:48.754Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:02:16.685Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:02:19.479Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:02:47.067Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:02:49.353Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:03:07.835Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:03:07.953Z"
   },
   {
    "duration": 112,
    "start_time": "2021-11-16T11:07:52.072Z"
   },
   {
    "duration": 187,
    "start_time": "2021-11-16T11:09:23.468Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T11:10:01.455Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:10:05.069Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T11:10:13.376Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:10:14.434Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:10:22.853Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T11:27:29.279Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-16T11:29:08.919Z"
   },
   {
    "duration": 118,
    "start_time": "2021-11-16T11:29:46.703Z"
   },
   {
    "duration": 437,
    "start_time": "2021-11-16T11:36:02.181Z"
   },
   {
    "duration": 157,
    "start_time": "2021-11-16T11:36:14.388Z"
   },
   {
    "duration": 207,
    "start_time": "2021-11-16T11:47:15.898Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:53:52.092Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:53:52.236Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T11:59:12.005Z"
   },
   {
    "duration": 112,
    "start_time": "2021-11-16T12:00:33.446Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T12:02:14.453Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-16T12:02:39.512Z"
   },
   {
    "duration": 106,
    "start_time": "2021-11-16T12:03:03.460Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:37:21.139Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:37:22.229Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:38:38.806Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:38:41.958Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:43:46.551Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T20:58:21.835Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T20:59:21.872Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T20:59:45.352Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T20:59:49.646Z"
   },
   {
    "duration": 159,
    "start_time": "2021-11-17T21:02:26.949Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:03:53.461Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:03:53.694Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:05:28.145Z"
   },
   {
    "duration": 116,
    "start_time": "2021-11-17T21:05:57.787Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:06:37.993Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:06:38.261Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:11:54.358Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:12:43.846Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:13:08.773Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:14:44.441Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:15:42.059Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:15:51.995Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:15:53.923Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:15:55.282Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:16:28.492Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:16:32.603Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:17:06.941Z"
   },
   {
    "duration": 98,
    "start_time": "2021-11-17T21:18:05.733Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:21:35.255Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:21:37.804Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:23:06.071Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:23:24.799Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:23:32.591Z"
   },
   {
    "duration": 98,
    "start_time": "2021-11-17T21:28:31.559Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:28:45.448Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:29:17.303Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:29:29.617Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:29:32.681Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:36:11.474Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:36:14.791Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:36:53.943Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:36:56.165Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:37:16.590Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:37:22.702Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:38:03.479Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:38:08.601Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:38:12.928Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:38:48.896Z"
   },
   {
    "duration": 2,
    "start_time": "2021-11-17T21:38:49.171Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:39:57.889Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:39:58.057Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:41:20.108Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:41:20.629Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:42:49.136Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:43:15.137Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:43:16.766Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:43:31.711Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:43:36.312Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:45:08.825Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:45:10.119Z"
   },
   {
    "duration": 4,
    "start_time": "2021-11-17T21:45:13.748Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:45:22.219Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:45:33.412Z"
   },
   {
    "duration": 2,
    "start_time": "2021-11-17T21:46:01.885Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-17T21:46:03.628Z"
   },
   {
    "duration": 107,
    "start_time": "2021-11-17T21:47:32.512Z"
   },
   {
    "duration": 103,
    "start_time": "2021-11-17T21:50:36.243Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-18T06:28:31.440Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-18T06:29:00.168Z"
   },
   {
    "duration": 3,
    "start_time": "2021-11-18T06:31:27.008Z"
   },
   {
    "duration": 2,
    "start_time": "2021-11-18T06:35:34.288Z"
   },
   {
    "duration": 2,
    "start_time": "2021-11-18T06:38:04.527Z"
   }
  ],
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "303.993px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
